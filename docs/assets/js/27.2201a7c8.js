(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{330:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"初始化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化器"}},[t._v("#")]),t._v(" 初始化器")]),t._v(" "),s("p",[t._v("类、结构体、枚举都可以定义初始化器")]),t._v(" "),s("h2",{attrs:{id:"类初始化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类初始化器"}},[t._v("#")]),t._v(" 类初始化器")]),t._v(" "),s("p",[t._v("类有2种初始化器：指定初始化器（designated initializer）、便捷初始化器（convenience initializer）")]),t._v(" "),s("ul",[s("li",[t._v("每个类至少有一个指定初始化器，指定初始化器是类的主要初始化器")]),t._v(" "),s("li",[t._v("默认初始化器总是类的指定初始化器")]),t._v(" "),s("li",[t._v("类偏向于少量指定初始化器，一个类通常只有一个指定初始化器")])]),t._v(" "),s("p",[t._v("初始化器的相互调用规则")]),t._v(" "),s("ul",[s("li",[t._v("指定初始化器必须从它的直系父类调用指定初始化器")]),t._v(" "),s("li",[t._v("便捷初始化器必须从相同的类里调用另一个初始化器")]),t._v(" "),s("li",[t._v("便捷初始化器最终必须调用一个指定初始化器")])]),t._v(" "),s("h2",{attrs:{id:"两段式初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两段式初始化"}},[t._v("#")]),t._v(" 两段式初始化")]),t._v(" "),s("p",[t._v("Swift在编码安全方面是煞费苦心，为了保证初始化过程的安全，设定了两段式初始化、 安全检查")]),t._v(" "),s("p",[t._v("第1阶段：初始化所有存储属性 ① 外层调用指定\\便捷初始化器 ② 分配内存给实例，但未初始化 ③ 指定初始化器确保当前类定义的存储属性都初始化 ④ 指定初始化器调用父类的初始化器，不断向上调用，形成初始化器链")]),t._v(" "),s("p",[t._v("第2阶段：设置新的存储属性值 ① 从顶部初始化器往下，链中的每一个指定初始化器都有机会进一步定制实例 ② 初始化器现在能够使用self（访问、修改它的属性，调用它的实例方法等等） ③ 最终，链中任何便捷初始化器都有机会定制实例以及使用self")]),t._v(" "),s("h2",{attrs:{id:"安全检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安全检查"}},[t._v("#")]),t._v(" 安全检查")]),t._v(" "),s("p",[t._v("指定初始化器必须保证在调用父类初始化器之前，其所在类定义的所有存储属性都要初始化完成")]),t._v(" "),s("p",[t._v("指定初始化器必须先调用父类初始化器，然后才能为继承的属性设置新值")]),t._v(" "),s("p",[t._v("便捷初始化器必须先调用同类中的其它初始化器，然后再为任意属性设置新值")]),t._v(" "),s("p",[t._v("初始化器在第1阶段初始化完成之前，不能调用任何实例方法、不能读取任何实例属性的值，也不能引用self")]),t._v(" "),s("p",[t._v("直到第1阶段结束，实例才算完全合法")]),t._v(" "),s("p",[t._v("这一套规则保证了：使用任意初始化器，都可以完整地初始化实例")]),t._v(" "),s("h2",{attrs:{id:"重写父类指定初始化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写父类指定初始化器"}},[t._v("#")]),t._v(" 重写父类指定初始化器")]),t._v(" "),s("p",[t._v("当重写父类的指定初始化器时，必须加上override（即使子类的实现是便捷初始化器）")]),t._v(" "),s("p",[t._v("如果子类写了一个匹配父类便捷初始化器的初始化器，不用加上override p因为父类的便捷初始化器永远不会通过子类直接调用，因此，严格来说，子类无法重写父类的便捷初始化器")]),t._v(" "),s("h2",{attrs:{id:"自动继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动继承"}},[t._v("#")]),t._v(" 自动继承")]),t._v(" "),s("p",[t._v("① 如果子类没有自定义任何指定初始化器，它会自动继承父类所有的指定初始化器")]),t._v(" "),s("p",[t._v("② 如果子类提供了父类所有指定初始化器的实现（要么通过方式①继承，要么重写） 。子类自动继承所有的父类便捷初始化器")]),t._v(" "),s("p",[t._v("③ 就算子类添加了更多的便捷初始化器，这些规则仍然适用")]),t._v(" "),s("p",[t._v("④ 子类以便捷初始化器的形式重写父类的指定初始化器，也可以作为满足规则②的一部分")]),t._v(" "),s("h2",{attrs:{id:"required"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#required"}},[t._v("#")]),t._v(" required")]),t._v(" "),s("p",[t._v("用required修饰指定初始化器，表明其所有子类都必须实现该初始化器（通过继承或者重写实现）")]),t._v(" "),s("p",[t._v("如果子类重写了required初始化器，也必须加上required，不用加override")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class Person { \n\trequired init() { } \n\tinit(age: Int) { } \n}\n\nclass Student : Person { \n\trequired init() { \n\t\tsuper.init() \n\t} \n}\n")])])]),s("h2",{attrs:{id:"属性观察器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性观察器"}},[t._v("#")]),t._v(" 属性观察器")]),t._v(" "),s("p",[t._v("父类的属性在它自己的初始化器中赋值不会触发属性观察器，但在子类的初始化器中赋值会触发属性观察器")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("willSet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"willSet"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("didSet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"didSet"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// willSet 1 // didSet 0 1  ")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" stu "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Student")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"可失败初始化器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可失败初始化器"}},[t._v("#")]),t._v(" 可失败初始化器")]),t._v(" "),s("p",[t._v("类、结构体、枚举都可以使用init?定义可失败初始化器")]),t._v(" "),s("div",{staticClass:"language-swift extra-class"},[s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isEmpty "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token nil constant"}},[t._v("nil")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("不允许同时定义参数标签、参数个数、参数类型相同的可失败初始化器和非可失败初始化器")]),t._v(" "),s("p",[t._v("可以用init!定义隐式解包的可失败初始化器")]),t._v(" "),s("p",[t._v("可失败初始化器可以调用非可失败初始化器，非可失败初始化器调用可失败初始化器需要进行解包")]),t._v(" "),s("p",[t._v("如果初始化器调用一个可失败初始化器导致初始化失败，那么整个初始化过程都失败，并且之后的代码都停止执行")]),t._v(" "),s("p",[t._v("可以用一个非可失败初始化器重写一个可失败初始化器，但反过来是不行的")]),t._v(" "),s("h2",{attrs:{id:"反初始化器-deinit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反初始化器-deinit"}},[t._v("#")]),t._v(" 反初始化器（deinit）")]),t._v(" "),s("p",[t._v("deinit叫做反初始化器，类似于C++的析构函数、OC中的dealloc方法")]),t._v(" "),s("p",[t._v("当类的实例对象被释放内存时，就会调用实例对象的deinit方法")]),t._v(" "),s("p",[t._v("deinit不接受任何参数，不能写小括号，不能自行调用")]),t._v(" "),s("p",[t._v("父类的deinit能被子类继承")]),t._v(" "),s("p",[t._v("子类的deinit实现执行完毕后会调用父类的deinit")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('class Person { deinit { print("Person对象销毁了") } }\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);