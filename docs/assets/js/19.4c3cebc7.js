(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{319:function(e,t,s){"use strict";s.r(t);var a=s(6),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"runtime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[e._v("#")]),e._v(" Runtime")]),e._v(" "),t("p",[e._v("OC是一门动态性比较强的编程语言，允许很多操作推迟到程序运行时再进行")]),e._v(" "),t("p",[e._v("OC的动态性就是由Runtime来支撑和实现的，Runtime是一套C语言的API，封装了很多动态性相关的函数")]),e._v(" "),t("p",[e._v("平时编写的OC代码，底层都是转换成了Runtime API进行调用")]),e._v(" "),t("h2",{attrs:{id:"isa指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#isa指针"}},[e._v("#")]),e._v(" isa指针")]),e._v(" "),t("p",[e._v("在arm64架构之前，isa就是一个普通的指针，存储着Class、Meta-Class对象的内存地址")]),e._v(" "),t("p",[e._v("从arm64架构开始，对isa进行了优化，变成了一个共用体（union）结构，还使用位域来存储更多的信息")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220605101522274.png",alt:"image-20220605101522274"}})]),e._v(" "),t("p",[t("strong",[e._v("nonpointer")])]),e._v(" "),t("p",[e._v("0，代表普通的指针，存储着Class、Meta-Class对象的内存地址；1，代表优化过，使用位域存储更多的信息")]),e._v(" "),t("p",[t("strong",[e._v("has_assoc")])]),e._v(" "),t("p",[e._v("是否有设置过关联对象，如果没有，释放时会更快")]),e._v(" "),t("p",[t("strong",[e._v("has_cxx_dtor")])]),e._v(" "),t("p",[e._v("是否有C++的析构函数（.cxx_destruct），如果没有，释放时会更快")]),e._v(" "),t("p",[t("strong",[e._v("shiftcls")])]),e._v(" "),t("p",[e._v("存储着Class、Meta-Class对象的内存地址信息")]),e._v(" "),t("p",[t("strong",[e._v("magic")])]),e._v(" "),t("p",[e._v("用于在调试时分辨对象是否未完成初始化")]),e._v(" "),t("p",[t("strong",[e._v("weakly_referenced")])]),e._v(" "),t("p",[e._v("是否有被弱引用指向过，如果没有，释放时会更快")]),e._v(" "),t("p",[t("strong",[e._v("deallocating")])]),e._v(" "),t("p",[e._v("对象是否正在释放")]),e._v(" "),t("p",[t("strong",[e._v("extra_rc")])]),e._v(" "),t("p",[e._v("里面存储的值是引用计数器减1")]),e._v(" "),t("p",[t("strong",[e._v("has_sidetable_rc")])]),e._v(" "),t("p",[e._v("引用计数器是否过大无法存储在isa中；如果为1，那么引用计数会存储在一个叫SideTable的类的属性中")]),e._v(" "),t("h2",{attrs:{id:"cache-t-方法缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-t-方法缓存"}},[e._v("#")]),e._v(" cache_t 方法缓存")]),e._v(" "),t("p",[e._v("Class内部结构中有个方法缓存（cache_t），用散列表（哈希表）来缓存曾经调用过的方法，可以提高方法的查找速度")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220605103359536.png",alt:"image-20220605103359536"}})]),e._v(" "),t("p",[e._v("缓存查找")]),e._v(" "),t("p",[e._v("objc-cache.mm")]),e._v(" "),t("p",[e._v("bucket_t * cache_t::find(cache_key_t k, id receiver)")]),e._v(" "),t("h2",{attrs:{id:"objc-msgsend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#objc-msgsend"}},[e._v("#")]),e._v(" objc_msgSend")]),e._v(" "),t("p",[e._v("OC中的方法调用，其实都是转换为objc_msgSend函数的调用")]),e._v(" "),t("p",[e._v("objc_msgSend的执行流程可以分为3大阶段")]),e._v(" "),t("ul",[t("li",[e._v("消息发送")]),e._v(" "),t("li",[e._v("动态方法解析")]),e._v(" "),t("li",[e._v("消息转发")])]),e._v(" "),t("h2",{attrs:{id:"消息发送"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息发送"}},[e._v("#")]),e._v(" 消息发送")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220605123625460.png",alt:"image-20220605123625460"}})]),e._v(" "),t("p",[e._v("如果是从class_rw_t中查找方法")]),e._v(" "),t("ul",[t("li",[e._v("已经排序的，二分查找")]),e._v(" "),t("li",[e._v("没有排序的，遍历查找")])]),e._v(" "),t("p",[e._v("receiver通过"),t("strong",[e._v("isa指针")]),e._v("找到receiverClass")]),e._v(" "),t("p",[e._v("receiverClass通过"),t("strong",[e._v("superclass指针")]),e._v("找到superClass")]),e._v(" "),t("h2",{attrs:{id:"动态方法解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态方法解析"}},[e._v("#")]),e._v(" 动态方法解析")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220605123907793.png",alt:"image-20220605123907793"}})]),e._v(" "),t("p",[e._v("开发者可以实现以下方法，来动态添加方法实现")]),e._v(" "),t("ul",[t("li",[e._v("+resolveInstanceMethod:")]),e._v(" "),t("li",[e._v("+resolveClassMethod:")])]),e._v(" "),t("p",[e._v("动态解析过后，会重新走“消息发送”的流程")]),e._v(" "),t("ul",[t("li",[e._v("“从receiverClass的cache中查找方法”这一步开始执行")])]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('void c_other(id self, SEL _cmd) {\n    NSLog(@"c_other - %@ - %@", self, NSStringFromSelector(_cmd));\n}\n\n- (void)other {\n    NSLog(@"other - %s", __func__);\n}\n\n+ (BOOL)resolveClassMethod:(SEL)sel\n{\n    if (sel == @selector(test)) {\n        // 第一个参数是object_getClass(self)\n        class_addMethod(object_getClass(self), sel, (IMP)c_other, "v16@0:8");\n        \n        return YES;\n    }\n    return [super resolveClassMethod:sel];\n}\n\n+ (BOOL)resolveInstanceMethod:(SEL)sel\n{\n    if (sel == @selector(test)) {\n        // 动态添加test方法的实现\n//        class_addMethod(self, sel, (IMP)c_other, "v16@0:8");\n        \n        // 获取其他方法\n        Method method = class_getInstanceMethod(self, @selector(other));\n        // 动态添加test方法的实现\n        class_addMethod(self, sel,\n                        method_getImplementation(method),\n                        method_getTypeEncoding(method));\n  \n        // 返回YES代表有动态添加方法\n        return YES;\n    }\n    return [super resolveInstanceMethod:sel];\n}\n\n')])])]),t("h2",{attrs:{id:"消息转发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息转发"}},[e._v("#")]),e._v(" 消息转发")]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220606195521004.png",alt:"image-20220606195521004"}})]),e._v(" "),t("p",[e._v("开发者可以在forwardInvocation:方法中自定义任何逻辑")]),e._v(" "),t("p",[e._v("以上方法都有对象方法、类方法2个版本（前面可以是加号+，也可以是减号-）")]),e._v(" "),t("p",[t("strong",[e._v("NSMethodSignature")]),e._v("获取：")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('NSMethodSignature *signature = [NSMethodSignature signatureWithObjCTypes:"v16@0:8"];\nNSMethodSignature *signature = [[[ReceiveMethod alloc] init] methodSignatureForSelector:@selector(test)];\n')])])]),t("p",[e._v("消息转发实现代码：")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('- (id)forwardingTargetForSelector:(SEL)aSelector {\n    if (aSelector == @selector(test)) {\n        return [[ReceiveMethod alloc] init];\n    }\n    return [super forwardingTargetForSelector:aSelector];\n}\n\n// 方法签名：返回值类型、参数类型\n- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector {\n    if (aSelector == @selector(test1)) {\n        return [NSMethodSignature signatureWithObjCTypes:"v16@0:8"];\n    }\n    return [super methodSignatureForSelector:aSelector];\n}\n\n//// NSInvocation封装了一个方法调用，包括：方法调用者、方法名、方法参数\n- (void)forwardInvocation:(NSInvocation *)anInvocation {\n    NSLog(@"%@", anInvocation);\n    NSLog(@"%s", anInvocation.selector);\n    NSLog(@"%@", anInvocation.target);\n}\n')])])]),t("h2",{attrs:{id:"dynamic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dynamic"}},[e._v("#")]),e._v(" @dynamic")]),e._v(" "),t("p",[e._v("提醒编译器不要自动生成setter和getter的实现、不要自动生成成员变量")]),e._v(" "),t("h2",{attrs:{id:"super的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#super的本质"}},[e._v("#")]),e._v(" super的本质")]),e._v(" "),t("p",[e._v("super调用，底层会转换为objc_msgSendSuper2函数的调用，接收2个参数")]),e._v(" "),t("ul",[t("li",[e._v("struct objc_super2")]),e._v(" "),t("li",[e._v("SEL")])]),e._v(" "),t("p",[t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220606205831713.png",alt:"image-20220606205831713"}})]),e._v(" "),t("ul",[t("li",[e._v("receiver是消息接收者")]),e._v(" "),t("li",[e._v("current_class是receiver的Class对象")])]),e._v(" "),t("h2",{attrs:{id:"runtime应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime应用"}},[e._v("#")]),e._v(" runtime应用")]),e._v(" "),t("ul",[t("li",[e._v("查看私有成员变量\n"),t("ul",[t("li",[e._v("设置UITextField占位文字的颜色")])])]),e._v(" "),t("li",[e._v("字典转模型\n"),t("ul",[t("li",[e._v("利用Runtime遍历所有的属性或者成员变量")]),e._v(" "),t("li",[e._v("利用KVC设值")])])]),e._v(" "),t("li",[e._v("替换方法实现\n"),t("ul",[t("li",[e._v("class_replaceMethod")]),e._v(" "),t("li",[e._v("method_exchangeImplementations")])])])]),e._v(" "),t("h2",{attrs:{id:"runtime-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#runtime-api"}},[e._v("#")]),e._v(" Runtime API")]),e._v(" "),t("p",[e._v("类相关")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 动态创建一个类（参数：父类，类名，额外的内存空间）\nClass objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)\n\n// 注册一个类（要在类注册之前添加成员变量）\nvoid objc_registerClassPair(Class cls) \n\n// 销毁一个类\nvoid objc_disposeClassPair(Class cls)\n\n// 获取isa指向的Class\nClass object_getClass(id obj)\n\n// 设置isa指向的Class\nClass object_setClass(id obj, Class cls)\n\n// 判断一个OC对象是否为Class\nBOOL object_isClass(id obj)\n\n// 判断一个Class是否为元类\nBOOL class_isMetaClass(Class cls)\n\n// 获取父类\nClass class_getSuperclass(Class cls)\n")])])]),t("p",[e._v("成员变量")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获取一个实例变量信息\nIvar class_getInstanceVariable(Class cls, const char *name)\n\n// 拷贝实例变量列表（最后需要调用free释放）\nIvar *class_copyIvarList(Class cls, unsigned int *outCount)\n\n// 设置和获取成员变量的值\nvoid object_setIvar(id obj, Ivar ivar, id value)\nid object_getIvar(id obj, Ivar ivar)\n\n// 动态添加成员变量（已经注册的类是不能动态添加成员变量的）\nBOOL class_addIvar(Class cls, const char * name, size_t size, uint8_t alignment, const char * types)\n\n// 获取成员变量的相关信息\nconst char *ivar_getName(Ivar v)\nconst char *ivar_getTypeEncoding(Ivar v)\n\n")])])]),t("p",[e._v("属性")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获取一个属性\nobjc_property_t class_getProperty(Class cls, const char *name)\n\n// 拷贝属性列表（最后需要调用free释放）\nobjc_property_t *class_copyPropertyList(Class cls, unsigned int *outCount)\n\n// 动态添加属性\nBOOL class_addProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount)\n\n// 动态替换属性\nvoid class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount)\n\n// 获取属性的一些信息\nconst char *property_getName(objc_property_t property)\nconst char *property_getAttributes(objc_property_t property)\n\n")])])]),t("p",[e._v("方法")]),e._v(" "),t("div",{staticClass:"language-objective-c extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 获得一个实例方法、类方法\nMethod class_getInstanceMethod(Class cls, SEL name)\nMethod class_getClassMethod(Class cls, SEL name)\n\n// 方法实现相关操作\nIMP class_getMethodImplementation(Class cls, SEL name) \nIMP method_setImplementation(Method m, IMP imp)\nvoid method_exchangeImplementations(Method m1, Method m2) \n\n// 拷贝方法列表（最后需要调用free释放）\nMethod *class_copyMethodList(Class cls, unsigned int *outCount)\n\n// 动态添加方法\nBOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)\n\n// 动态替换方法\nIMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)\n\n// 获取方法的相关信息（带有copy的需要调用free去释放）\nSEL method_getName(Method m)\nIMP method_getImplementation(Method m)\nconst char *method_getTypeEncoding(Method m)\nunsigned int method_getNumberOfArguments(Method m)\nchar *method_copyReturnType(Method m)\nchar *method_copyArgumentType(Method m, unsigned int index)\n  \n// 选择器相关\nconst char *sel_getName(SEL sel)\nSEL sel_registerName(const char *str)\n\n// 用block作为方法实现\nIMP imp_implementationWithBlock(id block)\nid imp_getBlock(IMP anImp)\nBOOL imp_removeBlock(IMP anImp)\n\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);