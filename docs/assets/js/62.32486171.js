(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{364:function(a,t,s){"use strict";s.r(t);var _=s(6),e=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"深度测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度测试"}},[a._v("#")]),a._v(" 深度测试")]),a._v(" "),t("h3",{attrs:{id:"深度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度"}},[a._v("#")]),a._v(" 深度")]),a._v(" "),t("p",[a._v("深度其实就是该像素点在3D世界中距离摄像机的距离,Z值")]),a._v(" "),t("h3",{attrs:{id:"深度缓冲区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度缓冲区"}},[a._v("#")]),a._v(" 深度缓冲区")]),a._v(" "),t("p",[a._v("深度缓存区,就是⼀块内存区域,专⻔存储着每个像素点(绘制在屏幕上的)深度值.深度值(Z值)越⼤, 则离摄像机就越远.")]),a._v(" "),t("p",[a._v("只要存在深度缓冲区，"),t("strong",[a._v("OpenGL")]),a._v("都会把像素的深度值写⼊到缓冲区中**.** 除⾮调用 "),t("code",[a._v("glDepthMask(GL_FALSE)")]),a._v("​来禁⽌写⼊.")]),a._v(" "),t("h3",{attrs:{id:"深度测试-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度测试-2"}},[a._v("#")]),a._v(" 深度测试")]),a._v(" "),t("p",[a._v("在决定是否绘制⼀个物体表⾯时，⾸先要将表面对应的像素的深度值与当前深度缓冲区中的值进行比较，如果⼤于深度缓冲区中的值，则丢弃这部分。否则利⽤这个像素对应的深度值和颜⾊值，分别更更新深度缓冲区和颜⾊色缓存区。这个过程称为“深度测试”")]),a._v(" "),t("h3",{attrs:{id:"深度测试的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度测试的使用"}},[a._v("#")]),a._v(" 深度测试的使用")]),a._v(" "),t("p",[a._v("1、开启深度测试")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glEnable(GL_DEPTH_TEST);\n")])])]),t("p",[a._v("2、在绘制场景前，清除颜⾊色缓存区，深度缓冲区")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n")])])]),t("p",[a._v("3、指定深度测试判断模式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//指定深度测试判断模式\nvoid glDepthFunc(GLEnum mode);\n")])])]),t("p",[a._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220720180520742.png",alt:"image-20220720180520742"}}),a._v("​")]),a._v(" "),t("p",[a._v("4、打开/阻断深度缓存区写入")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("void glDepthMask(GLBool value);\nvalue : GL_TURE 开启深度缓冲区写⼊入; GL_FALSE 关闭深度缓冲区写⼊入\n")])])]),t("h2",{attrs:{id:"zfighting闪烁问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zfighting闪烁问题"}},[a._v("#")]),a._v(" ZFighting闪烁问题")]),a._v(" "),t("p",[a._v("显示出来的2个画面交错出现，交错闪烁的现象")]),a._v(" "),t("p",[a._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220720200943685.png",alt:"image-20220720200943685"}}),a._v("​")]),a._v(" "),t("p",[a._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220720200958730.png",alt:"image-20220720200958730"}}),a._v("​")]),a._v(" "),t("h3",{attrs:{id:"原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[a._v("#")]),a._v(" 原因：")]),a._v(" "),t("p",[a._v("开启深度测试后,OpenGL 就不会再去绘制模型被遮挡的部分. 这样实现的显示更加真实。但是由于深度缓冲区精度的限制对于深度相差⾮常⼩的情况下.(例如在同⼀平面上进⾏2次绘制),OpenGL 就可能出现不不能正确判断两者的深度值,会导致深度测试的结果不可预测.")]),a._v(" "),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" 解决方案：")]),a._v(" "),t("p",[a._v("多边形偏移（Polygon Offset）")]),a._v(" "),t("h3",{attrs:{id:"问题预防"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题预防"}},[a._v("#")]),a._v(" 问题预防：")]),a._v(" "),t("ul",[t("li",[a._v("不要将两个物体靠的太近，避免渲染时三角形叠在一起。这种方式要求对场景中物体插入一个少量的偏移，那么就可能避免ZFighting现象。例如上面的⽴方体和平面问题中，将平⾯下移0.001f就可以解决这个问题。当然手动去插入这个小的偏移是要付出代价的。")]),a._v(" "),t("li",[a._v("尽可能将近裁剪⾯设置得离观察者远⼀些。上⾯我们看到，在近裁剪平⾯附近，深度的精确度是很⾼的，因此尽可能让近裁剪面远⼀一些的话，会使整个裁剪范围内的精确度变⾼一些。但是这种⽅式会使离观察者较近的物体被裁减掉，因此需要调试好裁剪面参数。")]),a._v(" "),t("li",[a._v("使⽤更高位数的深度缓冲区，通常使用的深度缓冲区是24位的，现在有⼀些硬件使⽤32位的缓冲区，使精确度得到提⾼")])]),a._v(" "),t("h2",{attrs:{id:"多边形偏移-polygon-offset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多边形偏移-polygon-offset"}},[a._v("#")]),a._v(" 多边形偏移（Polygon Offset）")]),a._v(" "),t("p",[a._v("在执⾏深度测试前将⽴方体的深度值做⼀些细微的增加，使重叠的2个图形深度值之间有所区分")]),a._v(" "),t("h3",{attrs:{id:"使用步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用步骤"}},[a._v("#")]),a._v(" 使用步骤：")]),a._v(" "),t("p",[a._v("1、启⽤Polygon Offset 方式")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glEnable(GL_POLYGON_OFFSET_FILL)\n")])])]),t("p",[a._v("参数列列表:")]),a._v(" "),t("ul",[t("li",[a._v("GL_POLYGON_OFFSET_POINT \t对应光栅化模式: GL_POINT")]),a._v(" "),t("li",[a._v("GL_POLYGON_OFFSET_LINE       对应光栅化模式: GL_LINE")]),a._v(" "),t("li",[a._v("GL_POLYGON_OFFSET_FILL        对应光栅化模式: GL_FILL")])]),a._v(" "),t("p",[a._v("2、指定偏移量")]),a._v(" "),t("p",[a._v("通过glPolygonOffset 来指定。glPolygonOffset 需要2个参数: factor , units")]),a._v(" "),t("p",[a._v("每个Fragment 的深度值都会增加如下所示的偏移量量:")]),a._v(" "),t("p",[a._v("​"),t("code",[a._v("Offset = ( m * factor ) + ( r * units);")]),a._v("​")]),a._v(" "),t("p",[a._v("m : 多边形的深度的斜率的最⼤值，一个多边形越是与近裁剪面平行,m 就越接近于0.")]),a._v(" "),t("p",[a._v("r : 能产⽣于窗口坐标系的深度值中可分辨的差异最⼩值。r 是由OpenGL 平台指定的一个常量量.")]),a._v(" "),t("p",[a._v("⼀个大于0的Offset 会把模型推到离你(摄像机)更远的位置,相应的一个⼩于0的Offset会把模型拉近")]),a._v(" "),t("p",[a._v("一般⽽言,只需要将-1.0 和 -1 这样简单赋值给glPolygonOffset 基本可以满⾜足需求.")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("void glPolygonOffset(Glfloat factor,Glfloat units);\n\n//应⽤用到⽚片段上总偏移计算⽅方程式:\nDepth Offset = (DZ * factor) + (r * units); \n\n//DZ:深度值(Z值)\n//r:使得深度缓冲区产⽣变化的最小值\n//负值，将使得z值距离我们更近，⽽正值，将使得z值距离我们更远\n")])])]),t("p",[a._v("3、关闭 Polygon Offset")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glDisable(GL_POLYGON_OFFSET_FILL)\n")])])]),t("h2",{attrs:{id:"混合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#混合"}},[a._v("#")]),a._v(" 混合")]),a._v(" "),t("p",[a._v("当开启深度测试后，两个重叠的图层中，如果有一个图层是半透明的，另一个是非半透明，此时就不能通过深度值比较，来进行颜色值的覆盖，而是需要将两个颜色进行混合，然后存入颜色缓冲区。")]),a._v(" "),t("p",[a._v("混合函数经常用于实现在不透明的物体前⾯绘制⼀个透明物体的效果")]),a._v(" "),t("h3",{attrs:{id:"目标颜色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#目标颜色"}},[a._v("#")]),a._v(" 目标颜色")]),a._v(" "),t("p",[a._v("已经存储在颜色缓存区的颜色值")]),a._v(" "),t("h3",{attrs:{id:"源颜色"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源颜色"}},[a._v("#")]),a._v(" 源颜色")]),a._v(" "),t("p",[a._v("作为当前渲染命令结果进入颜色缓存区的颜色值")]),a._v(" "),t("h3",{attrs:{id:"开启混合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开启混合"}},[a._v("#")]),a._v(" 开启混合")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glEnable(GL_BlEND);\n")])])]),t("h3",{attrs:{id:"颜色混合方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#颜色混合方式"}},[a._v("#")]),a._v(" 颜色混合方式")]),a._v(" "),t("p",[a._v("选择混合⽅方程式的函数:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("glbBlendEquation(GLenum mode);\n")])])]),t("p",[a._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220720203425222.png",alt:"image-20220720203425222"}}),a._v("​")]),a._v(" "),t("p",[a._v("默认混合方式：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Cf = (Cs * S) + (Cd * D)\n")])])]),t("ul",[t("li",[a._v("Cf :最终计算参数的颜色")]),a._v(" "),t("li",[a._v("Cs : 源颜色")]),a._v(" "),t("li",[a._v("Cd :⽬目标颜色")]),a._v(" "),t("li",[a._v("S:源混合因⼦")]),a._v(" "),t("li",[a._v("D:⽬标混合因⼦")])]),a._v(" "),t("h3",{attrs:{id:"设置混合因子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置混合因子"}},[a._v("#")]),a._v(" 设置混合因子")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//- S:源混合因⼦ , - D:⽬标混合因⼦\nglBlendFunc(GLenum S,GLenum D);\n\n//strRGB: 源颜⾊的混合因⼦\n//dstRGB: ⽬标颜色的混合因⼦ \n//strAlpha: 源颜色的Alpha因⼦ \n//dstAlpha: 目标颜⾊的Alpha因⼦\nvoid glBlendFuncSeparate(GLenum strRGB,GLenum dstRGB ,GLenum strAlpha,GLenum dstAlpha);\n\n//glBlendFunc 指定源和⽬标RGBA值的混合函数;\n//但是glBlendFuncSeparate函数则允许为RGB 和 Alpha 成分单独指定混合函数。\n")])])]),t("p",[a._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220720203852834.png",alt:"image-20220720203852834"}}),a._v("​")]),a._v(" "),t("p",[a._v("表中R、G、B、A 分别代表 红、绿、蓝、alpha。")]),a._v(" "),t("p",[a._v("表中下标S、D，分别代表源、⽬标")]),a._v(" "),t("p",[a._v("表中C 代表常量颜⾊(默认⿊色)")]),a._v(" "),t("p",[a._v("GL_CONSTANT_COLOR，GL_ONE_MINUS_CONSTANT_COLOR，GL_CONSTANT_ALPHA，GL_ONE_MINUS_CONSTANT值允许混合⽅程式中引入⼀个常量混合颜⾊")]),a._v(" "),t("p",[a._v("常量混合颜⾊：默认为黑色(0.0f,0.0f,0.0f,0.0f)")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 可以修改这个常量混合颜色。\nvoid glBlendColor(GLclampf red ,GLclampf green ,GLclampf blue ,GLclampf alpha );\n")])])]),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),t("ul",[t("li",[a._v("在颜色缓冲区中，每个像素点只能存储一种颜色")]),a._v(" "),t("li",[a._v("颜色混合主要用于实现在不透明物体前绘制透明物体的效果")]),a._v(" "),t("li",[a._v("只有上面图层是透明时，才需要开启颜色混合，如果不是，则没有必要开启颜色混合")]),a._v(" "),t("li",[a._v("新颜色的alpha值越高，添加的新颜色成分就越高，旧颜色值值就保留的越少")])])])}),[],!1,null,null,null);t.default=e.exports}}]);