(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{383:function(t,v,_){"use strict";_.r(v);var r=_(6),a=Object(r.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"传输层协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#传输层协议"}},[t._v("#")]),t._v(" 传输层协议")]),t._v(" "),v("p",[t._v("TCP（Transmission Control Protocol），传输控制协议")]),t._v(" "),v("p",[t._v("UDP（User Datagram Protocol），用户数据报协议")]),t._v(" "),v("h2",{attrs:{id:"tcp-udp对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-udp对比"}},[t._v("#")]),t._v(" tcp,udp对比")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("TCP")]),t._v(" "),v("th",[t._v("UDP")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("连接性")]),t._v(" "),v("td",[t._v("面向连接")]),t._v(" "),v("td",[t._v("无连接")])]),t._v(" "),v("tr",[v("td",[t._v("可靠性")]),t._v(" "),v("td",[t._v("可靠传输")]),t._v(" "),v("td",[t._v("不可靠传输，尽最大努力交付，可能丢包")])]),t._v(" "),v("tr",[v("td",[t._v("首部占用空间")]),t._v(" "),v("td",[t._v("大")]),t._v(" "),v("td",[t._v("小")])]),t._v(" "),v("tr",[v("td",[t._v("传输速率")]),t._v(" "),v("td",[t._v("慢")]),t._v(" "),v("td",[t._v("快")])]),t._v(" "),v("tr",[v("td",[t._v("资源消耗")]),t._v(" "),v("td",[t._v("大")]),t._v(" "),v("td",[t._v("小")])]),t._v(" "),v("tr",[v("td",[t._v("应用场景")]),t._v(" "),v("td",[t._v("浏览器、文件传输、邮件发送")]),t._v(" "),v("td",[t._v("音视频通话、直播")])]),t._v(" "),v("tr",[v("td",[t._v("应用层协议")]),t._v(" "),v("td",[t._v("HTTP、HTTPS、FTP、SMTP、DNS")]),t._v(" "),v("td",[t._v("DNS")])]),t._v(" "),v("tr",[v("td",[t._v("首部字节")]),t._v(" "),v("td",[t._v("20-60字节")]),t._v(" "),v("td",[t._v("8字节")])])])]),t._v(" "),v("h2",{attrs:{id:"tcp-数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-数据"}},[t._v("#")]),t._v(" TCP 数据")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/TCP%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png",alt:"TCP数据格式"}})]),t._v(" "),v("h4",{attrs:{id:"数据偏移"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据偏移"}},[t._v("#")]),t._v(" 数据偏移")]),t._v(" "),v("p",[t._v("占4位，取值范围是0x0101"),v("s",[t._v("0x1111 乘以4：首部长度（Header Length） 首部长度是20")]),t._v("60字节")]),t._v(" "),v("h4",{attrs:{id:"保留"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#保留"}},[t._v("#")]),t._v(" 保留")]),t._v(" "),v("p",[t._v("占6位，目前全为0。有些资料中，TCP首部的保留（Reserved）字段占3位，标志（Flags）字段占9位")]),t._v(" "),v("h4",{attrs:{id:"检验和"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#检验和"}},[t._v("#")]),t._v(" 检验和")]),t._v(" "),v("p",[t._v("由 伪首部+首部 + 数据 计算出来")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/TCP%E4%BC%AA%E9%A6%96%E9%83%A8.png",alt:"TCP伪首部"}})]),t._v(" "),v("h4",{attrs:{id:"标志位"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#标志位"}},[t._v("#")]),t._v(" 标志位")]),t._v(" "),v("p",[t._v("URG（Urgent） 当URG=1时，紧急指针字段才有效。表明当前报文段中有紧急数据，应优先尽快传送")]),t._v(" "),v("p",[t._v("ACK（Acknowledgment） 当ACK=1时，确认号字段才有效")]),t._v(" "),v("p",[t._v("PSH（Push）")]),t._v(" "),v("p",[t._v("RST（Reset） 当RST=1时，表明连接中出现严重差错，必须释放连接，然后再重新建立连接")]),t._v(" "),v("p",[t._v("SYN（Synchronization） 当SYN=1、ACK=0时，表明这是一个建立连接的请求 若对方同意建立连接，则回复SYN=1、ACK=1")]),t._v(" "),v("p",[t._v("FIN（Finish） 当FIN=1时，表明数据已经发送完毕，要求释放连接")]),t._v(" "),v("h4",{attrs:{id:"序号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#序号"}},[t._v("#")]),t._v(" 序号")]),t._v(" "),v("p",[t._v("4字节，首先，在传输过程的每一个字节都会有一个编号 在建立连接后，序号代表：这一次传给对方的TCP数据部分的第一个字节的编号")]),t._v(" "),v("h4",{attrs:{id:"确认号-acknowledgment-number"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#确认号-acknowledgment-number"}},[t._v("#")]),t._v(" 确认号（Acknowledgment Number）")]),t._v(" "),v("p",[t._v("占4字节 在建立连接后，确认号代表：期望对方下一次传过来的TCP数据部分的第一个字节的编号")]),t._v(" "),v("h4",{attrs:{id:"窗口-window"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#窗口-window"}},[t._v("#")]),t._v(" 窗口（Window）")]),t._v(" "),v("p",[t._v("占2字节 这个字段有流量控制功能，用以告知对方下一次允许发送的数据大小（字节为单位）")]),t._v(" "),v("h2",{attrs:{id:"udp-数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#udp-数据"}},[t._v("#")]),t._v(" UDP 数据")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/UDP%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.png",alt:"UDP数据格式"}})]),t._v(" "),v("p",[t._v("UDP长度\n占16位，首部长度+数据部分长度。TCP头部仅记录了TCP首部长度。\n传输层的数据长度 = 网络层数据长度 - 网络层首部长度 - 传输层首部长度")]),t._v(" "),v("p",[t._v("检验和\n由 伪首部+首部 + 数据 计算出来")]),t._v(" "),v("p",[v("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/UDP%E4%BC%AA%E9%A6%96%E9%83%A8.png",alt:"UDP伪首部"}})]),t._v(" "),v("h2",{attrs:{id:"tcp-详解"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-详解"}},[t._v("#")]),t._v(" TCP 详解")]),t._v(" "),v("h4",{attrs:{id:"可靠传输"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#可靠传输"}},[t._v("#")]),t._v(" 可靠传输")]),t._v(" "),v("p",[t._v("ARQ 自动重传技术")]),t._v(" "),v("p",[t._v("停止等待ARQ协议\n确认丢失，确认迟到，\n一次发一个，超时重发\n重传超系统设定次数，会发生RST报文，断开链接\n缺点：一次一个，效率低")]),t._v(" "),v("p",[t._v("连续ARQ协议 + 滑动窗口协议\n序号，确认号，窗口\nSACK\n一次发多个，\n缺点：中间数据包丢失，会重发从丢失数据包往后的所有数据，后面数据被重复发送降低性能")]),t._v(" "),v("p",[t._v("SACK\n改善上面的问题，可以告诉对方哪些数据丢失\n只发送丢失数据，不会发后续的已经接收的数据\nSACK信息存储在TCP首部的选项部分\n缺点：受选项部分长度限制，SACK最多携带4组边界信息")]),t._v(" "),v("h4",{attrs:{id:"tcp-流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-流量控制"}},[t._v("#")]),t._v(" TCP 流量控制")]),t._v(" "),v("p",[t._v("what\n让发送方的发送速率不要太快，让接收方来得及接收处理")]),t._v(" "),v("p",[t._v("why\n如果接收方的缓存区满了，发送方还在疯狂着发送数据 接收方只能把收到的数据包丢掉，大量的丢包会极大着浪费网络资源 所以要进行流量控制")]),t._v(" "),v("p",[t._v("原理\n通过确认报文中窗口字段来控制发送方的发送速率 发送方的发送窗口大小不能超过接收方给出窗口大小 当发送方收到接收窗口的大小为0时，发送方就会停止发送数据")]),t._v(" "),v("p",[t._v("窗口0特殊情况\n一开始，接收方给发送方发送了0窗口的报文段 后面，接收方又有了一些存储空间，给发送方发送的非0窗口的报文段丢失了 发送方的发送窗口一直为零，双方陷入僵局")]),t._v(" "),v("p",[t._v("解决方案 当发送方收到0窗口通知时，这时发送方停止发送报文 并且同时开启一个定时器，隔一段时间就发个测试报文去询问接收方最新的窗口大小 如果接收的窗口大小还是为0，则发送方再次刷新启动定时器")]),t._v(" "),v("h4",{attrs:{id:"tcp-拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制"}},[t._v("#")]),t._v(" TCP 拥塞控制")]),t._v(" "),v("p",[t._v("what\n防止过多的数据注入到网络中 避免网络中的路由器或链路过载\n涉及到所有的主机、路由器 以及与降低网络传输性能有关的所有因素 是大家共同努力的结果")]),t._v(" "),v("p",[t._v("与流量控制区别，流量控制是点对点通信的控制")]),t._v(" "),v("p",[t._v("拥塞控制方法\n慢开始\n拥塞避免\n快速重传\n快速恢复")]),t._v(" "),v("p",[t._v("相关缩写\nMSS（Maximum Segment Size）：每个段最大的数据部分大小 在建立连接时确定\ncwnd（congestion window）：拥塞窗口\nrwnd（receive window）：接收窗口\nswnd（send window）：发送窗口 swnd = min(cwnd, rwnd)")]),t._v(" "),v("p",[t._v("慢开始\ncwnd的初始值比较小，然后随着数据包被接收方确认（收到一个ACK） cwnd就成倍增长（指数级）")]),t._v(" "),v("p",[t._v("拥塞避免\nssthresh（slow start threshold）：慢开始阈值，cwnd达到阈值后，以线性方式增加\n拥塞避免（加法增大）：拥塞窗口缓慢增大，以防止网络过早出现拥塞\n乘法减小：只要网络出现拥塞，把ssthresh减为拥塞峰值的一半，同时执行慢开始算法（cwnd又恢复到初始值）\n当网络出现频繁拥塞时，ssthresh值就下降的很快")]),t._v(" "),v("p",[t._v("快速重传\n接收方 每收到一个失序的分组后就立即发出重复确认 使发送方及时知道有分组没有到达 而不要等待自己发送数据时才进行确认\n发送方 只要连续收到三个重复确认（总共4个相同的确认），就应当立即重传对方尚未收到的报文段 而不必继续等待重传计时器到期后再重传")]),t._v(" "),v("p",[t._v("快恢复\n当发送方连续收到三个重复确认，说明网络出现拥塞 就执行“乘法减小”算法，把ssthresh减为拥塞峰值的一半")]),t._v(" "),v("p",[t._v("与慢开始不同之处是现在不执行慢开始算法，即cwnd现在不恢复到初始值 而是把cwnd值设置为新的ssthresh值（减小后的值） 然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大")]),t._v(" "),v("p",[t._v("拥塞控制 - 发送窗口的最大值\n发送窗口的最大值：swnd = min(cwnd, rwnd)\n当rwnd < cwnd时，是接收方的接收能力限制发送窗口的最大值\n当cwnd < rwnd时，则是网络的拥塞限制发送窗口的最大值")]),t._v(" "),v("h4",{attrs:{id:"tcp-拥塞控制改进-bbr"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-拥塞控制改进-bbr"}},[t._v("#")]),t._v(" TCP 拥塞控制改进 BBR")]),t._v(" "),v("p",[t._v("互联网主要使用"),v("a",{attrs:{href:"http://dl.acm.org/citation.cfm?id=52356",target:"_blank",rel:"noopener noreferrer"}},[t._v("基于丢失的拥塞控制"),v("OutboundLink")],1),t._v("，仅依靠丢失数据包的指示作为减速信号。存在一下问题")]),t._v(" "),v("ul",[v("li",[t._v("在浅缓冲区中，数据包丢失发生在拥塞之前。对于当今使用具有浅缓冲区的商用交换机的高速、长途链路，基于丢失的拥塞控制可能会导致极低的吞吐量，因为它反应过度，即使丢包来自瞬时流量突发，也会在丢包时将发送速率减半（即使链路大部分空闲，这种丢包也可能非常频繁）。")]),t._v(" "),v("li",[t._v("在深度缓冲区中，拥塞发生在丢包之前。在当今互联网的边缘，基于丢失的拥塞控制会导致臭名昭著的“"),v("a",{attrs:{href:"http://queue.acm.org/detail.cfm?id=2071893",target:"_blank",rel:"noopener noreferrer"}},[t._v("缓冲膨胀"),v("OutboundLink")],1),t._v("”问题，它通过重复填充许多最后一英里链路中的深层缓冲区并导致几秒钟的不必要的排队延迟。")])]),t._v(" "),v("p",[t._v("为了决定通过网络发送数据的速度，BBR 考虑网络传输数据的速度。对于给定的网络连接，它使用网络传输速率和往返时间的最新测量值来构建一个明确的模型，该模型包括该连接可用的最近最大带宽和最近的最小往返延迟。然后，BBR 使用此模型来控制它发送数据的速度以及它随时愿意在网络中允许的最大数据量。")]),t._v(" "),v("h4",{attrs:{id:"链接管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#链接管理"}},[t._v("#")]),t._v(" 链接管理")]),t._v(" "),v("h5",{attrs:{id:"建立连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#建立连接"}},[t._v("#")]),t._v(" 建立连接")]),t._v(" "),v("p",[t._v("建立连接状态\nCLOSED：client处于关闭状态\nLISTEN：server处于监听状态，等待client连接\nSYN-RCVD：表示server接受到了SYN报文，当收到client的ACK报文后，它会进入到ESTABLISHED状态\nSYN-SENT：表示client已发送SYN报文，等待server的第2次握手\nESTABLISHED：表示连接已经建立")]),t._v(" "),v("p",[t._v("建立连接三次握手过程\n1、客户端 ---- SYN=1，ACK=0，seq=x    客户端CLOSED->SYN-SENT\n2、服务端 ---- SYN=1，ACK=1，seq=y, ack=x+1  服务端LISTEN->SYN-RCVD\n3、客户端 ---- ACK=1，seq=x+1, ack=y+1  客户端 SYN-SENT->ESTABLISHED\n服务端收到第三次握手数据后 SYN-RCVD -> ESTABLISHED")]),t._v(" "),v("p",[t._v("三次握手过程中，会交换一些信息\n比如MSS、是否支持SACK、Window scale（窗口缩放系数）等\n这些数据都放在了TCP头部的选项部分中（12字节）")]),t._v(" "),v("h5",{attrs:{id:"释放连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#释放连接"}},[t._v("#")]),t._v(" 释放连接")]),t._v(" "),v("p",[t._v("释放连接状态\nFIN-WAIT-1：表示想主动关闭连接 向对方发送了FIN报文，此时进入到FIN-WAIT-1状态")]),t._v(" "),v("p",[t._v("CLOSE-WAIT：表示在等待关闭 当对方发送FIN给自己，自己会回应一个ACK报文给对方，此时则进入到CLOSE-WAIT状态 在此状态下，需要考虑自己是否还有数据要发送给对方，如果没有，发送FIN报文给对方")]),t._v(" "),v("p",[t._v("FIN-WAIT-2：只要对方发送ACK确认后，主动方就会处于FIN-WAIT-2状态，然后等待对方发送FIN报文")]),t._v(" "),v("p",[t._v("CLOSING：一种比较罕见的例外状态 表示你发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文 如果双方几乎在同时准备关闭连接的话，那么就出现了双方同时发送FIN报文的情况，也即会出现CLOSING状态 表示双方都正在关闭连接")]),t._v(" "),v("p",[t._v("LAST-ACK：被动关闭一方在发送FIN报文后，最后等待对方的ACK报文 当收到ACK报文后，即可进入CLOSED状态了")]),t._v(" "),v("p",[t._v("TIME-WAIT：表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可进入CLOSED状态了 如果FIN-WAIT-1状态下，收到了对方同时带FIN标志和ACK标志的报文时 可以直接进入到TIME-WAIT状态，而无须经过FIN-WAIT-2状态")]),t._v(" "),v("p",[t._v("CLOSED：关闭状态")]),t._v(" "),v("p",[t._v("由于有些状态的时间比较短暂，所以很难用netstat命令看到，比如SYN-RCVD、FIN-WAIT-1等")]),t._v(" "),v("p",[t._v("释放连接过程\n1、客户端：FIN=1，ACK=1，seq=j，ack=q\nESTABLISHED -> FIN-WAIT-1\n2、服务端：ACK=1，seq=q，ack=j+1\nESTABLISHED -> CLOSE-WAIT   、\n客户端收到后 FIN-WAIT-1 -> FIN-WAIT-2\n3、服务端：FIN=1，ACK=1，seq=w，ack=j+1\nCLOSE-WAIT -> LAST-ACK\n4、客户端：ACK=1，seq=j+1，ack=w+1\nFIN-WAIT-2 -> TIME-WAIT\n服务端收到后 LAST-ACK -> CLOSED\nTIME-WAIT结束  客户端 进入CLOSED")]),t._v(" "),v("p",[t._v("释放过程细节\nTIME-WAIT 时间为 2倍MSL（Maximum Segment Lifetime，最大分段生存期）\nMSL是TCP报文在Internet上的最长生存时间\n每个具体的TCP实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟\n可以防止本次连接中产生的数据包误传到下一次连接中（因为本次连接中的数据包都会在2MSL时间内消失了）")]),t._v(" "),v("p",[t._v("二三次挥手可能会合并起来")]),t._v(" "),v("h2",{attrs:{id:"补充"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[t._v("#")]),t._v(" 补充")]),t._v(" "),v("h4",{attrs:{id:"为什么选择在传输层就将数据-大卸八块-分成多个段-而不是等到网络层再分片传递给数据链路层"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择在传输层就将数据-大卸八块-分成多个段-而不是等到网络层再分片传递给数据链路层"}},[t._v("#")]),t._v(" 为什么选择在传输层就将数据“大卸八块”分成多个段，而不是等到网络层再分片传递给数据链路层？")]),t._v(" "),v("p",[t._v("因为可以提高重传的性能\n需要明确的是：可靠传输是在传输层进行控制的\n如果在传输层不分段，一旦出现数据丢失，整个传输层的数据都得重传 如果在传输层分了段，一旦出现数据丢失，只需要重传丢失的那些段即可")]),t._v(" "),v("h4",{attrs:{id:"为什么要三次握手-为啥不能两次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手-为啥不能两次"}},[t._v("#")]),t._v(" 为什么要三次握手，为啥不能两次")]),t._v(" "),v("p",[t._v("防止server端一直等待，浪费资源")]),t._v(" "),v("p",[t._v("如果建立连接只需要2次握手，可能会出现的情况\n假设client发出的第一个连接请求报文段，因为网络延迟，在连接释放以后的某个时间才到达server\n本来这是一个早已失效的连接请求，但server收到此失效的请求后，误认为是client再次发出的一个新的连接请求\n于是server就向client发出确认报文段，同意建立连接\n如果不采用“3次握手”，那么只要server发出确认，新的连接就建立了\n由于现在client并没有真正想连接服务器的意愿，因此不会理睬server的确认，也不会向server发送数据\n但server却以为新的连接已经建立，并一直等待client发来数据，这样，server的很多资源就白白浪费掉了")]),t._v(" "),v("p",[t._v("采用“三次握手”的办法可以防止上述现象发生\n例如上述情况，client没有向server的确认发出确认，server由于收不到确认，就知道client并没有要求建立连接")]),t._v(" "),v("h4",{attrs:{id:"第3次握手失败了-会怎么处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#第3次握手失败了-会怎么处理"}},[t._v("#")]),t._v(" 第3次握手失败了，会怎么处理？")]),t._v(" "),v("p",[t._v("此时server的状态为SYN-RCVD，若等不到client的ACK，server会重新发送SYN+ACK包\n如果server多次重发SYN+ACK都等不到client的ACK，就会发送RST包，强制关闭连接")]),t._v(" "),v("h4",{attrs:{id:"为什么要进行四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要进行四次挥手"}},[t._v("#")]),t._v(" 为什么要进行四次挥手")]),t._v(" "),v("p",[t._v("TCP是全双工模式\n需要知道对方是否没有数据要发送了")]),t._v(" "),v("h4",{attrs:{id:"为什么要有time-wait时间"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有time-wait时间"}},[t._v("#")]),t._v(" 为什么要有TIME-WAIT时间")]),t._v(" "),v("p",[t._v("如果client发送ACK后马上释放了，然后又因为网络原因，server没有收到client的ACK，server就会重发FIN\n这时可能出现的情况是\nclient没有任何响应，服务器那边会干等，甚至多次重发FIN，浪费资源\nclient有个新的应用程序刚好分配了同一个端口号，新的应用程序收到FIN后马上开始执行断开连接的操作，本来 它可能是想跟server建立连接的")])])}),[],!1,null,null,null);v.default=a.exports}}]);