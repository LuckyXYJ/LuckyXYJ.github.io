(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{347:function(a,e,n){"use strict";n.r(e);var t=n(6),r=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("p",[a._v("新接手的项目启动速度贼慢，加上电脑性能太差，每次修改代码后启动都要等很久，所有产生了优化一下启动速度的想法")]),a._v(" "),e("h2",{attrs:{id:"启动过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#启动过程"}},[a._v("#")]),a._v(" 启动过程")]),a._v(" "),e("p",[a._v("启动的过程可以认为是用户点击app图标到第一个界面显示出来的过程。启动又分为"),e("strong",[a._v("冷启动")]),a._v("和"),e("strong",[a._v("热启动")]),a._v("，所谓冷热启动的区别无非就是从0到2。从1到2。冷启动是内存中没有应用相关数据，全部是重新加载的过程。热启动就是内存中有应用相关数据，部分重新加载过程。本文做的是冷启动的优化")]),a._v(" "),e("p",[a._v("启动过程分为"),e("strong",[a._v("pre-main")]),a._v(","),e("strong",[a._v("main")]),a._v("两个阶段，即main函数之前的加载过程，main函数之后到收个界面显示出来的过程。下面是关于两个阶段启动耗时的计算，优化方案")]),a._v(" "),e("h2",{attrs:{id:"pre-main阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pre-main阶段"}},[a._v("#")]),a._v(" pre-main阶段")]),a._v(" "),e("p",[a._v("该阶段的耗时测量，系统已提供了方法，可以通过设置Scheme内的环境变量DYLD_PRINT_STATISTICS为YES，在启动的时候可以打印出来相应的耗时。")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1240.jpeg",alt:"启动时间配置.png"}})]),a._v(" "),e("p",[a._v("​"),e("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20230220181834174.png",alt:"image-20230220181834174"}}),a._v("​")]),a._v(" "),e("p",[a._v("由图中可以看出应用耗时分为四个阶段，四个阶段所作工作如下")]),a._v(" "),e("ul",[e("li",[a._v("1、dylib loading time：这个阶段主要是加载动态库")]),a._v(" "),e("li",[a._v("2、rebase/binding time：偏移修正，符号绑定的过程")]),a._v(" "),e("li",[a._v("3、ObjC setup time：OC类注册")]),a._v(" "),e("li",[a._v("4、initializer time：这个阶段执行load，C++构造函数")])]),a._v(" "),e("h4",{attrs:{id:"rebase-binding解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rebase-binding解释"}},[a._v("#")]),a._v(" rebase/binding解释")]),a._v(" "),e("p",[a._v("rebase：在App启动过程中会生成一个随机值ASLR，App方法、函数在内存中的地址 = 二进制文件中的偏移地址 + ASLR")]),a._v(" "),e("p",[a._v("binding：地址与符号进行绑定")]),a._v(" "),e("h4",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[a._v("#")]),a._v(" 优化")]),a._v(" "),e("p",[a._v("根据以上四个阶段的介绍，可以得出以下几个优化方向\n1、减少动态库。网上看到文章说苹果官方建自定义动态库最好不超过6个，待验证，反正我没看到官方建议在哪，但是看其他大型应用好像确实是6个动态库。如果有很多动态库可以考虑将动态库进行合并")]),a._v(" "),e("p",[a._v("2、减少OC类。通常开发过程中为了解耦，为了代码更清晰，为了代码的复用，等等，我们才会把类进行拆分，总不能再为了优化启动时间把代码改回去，况且有人统计过2万个类大约增加800毫秒左右的启动时间。所以这个优化方向可以优化掉的启动时间的并不多。我们只能把项目迭代中产生的用不上，又不舍得删的代码删掉。")]),a._v(" "),e("p",[a._v("3、用dispatchonce()代替所有的__attribute__((constructor '解析引用锚文本失败，请尝试更新该引用指向的定义块后再重新打开该文档'))函数、C++静态对象初始化、ObjC的+load。如果是swift，尽量使用struct")]),a._v(" "),e("h2",{attrs:{id:"main阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main阶段"}},[a._v("#")]),a._v(" main阶段")]),a._v(" "),e("p",[a._v("main阶段耗时计算方案：通过代码记录进入main函数时的时间，以及进入didFinishLaunching方法或者第一个页面viewDidAppear方法的时间，然后计算两个时间的时间差。")]),a._v(" "),e("p",[a._v("这个阶段主要是执行我们写的各种业务代码，有很多并不是必须在这里立即执行的，这种业务我们可以采取延迟加载，防止影响启动时间。")]),a._v(" "),e("h4",{attrs:{id:"优化方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化方案"}},[a._v("#")]),a._v(" 优化方案")]),a._v(" "),e("p",[a._v("1、非重要业务，延迟操作\n2、多线程执行\n3、懒加载\n4、压缩图片资源")]),a._v(" "),e("h2",{attrs:{id:"二进制重排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二进制重排"}},[a._v("#")]),a._v(" 二进制重排")]),a._v(" "),e("p",[a._v("除了以上提到的优化方案，通过抖音团队的文章，也了解到另一种解决方案，即二进制重排。原理可以看原文"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485101&idx=1&sn=abbbb6da1aba37a04047fc210363bcc9&chksm=e9d0cd4fdea7445989cf26623a16fc8ce2876bf3bda95a5532bb0e5e5b1420765653df0b94d1&mpshare=1&scene=1&srcid=0316fLf0VRLHLhRPFDH6LuQo&sharer_sharetime=1595570815854&sharer_shareid=ff29c649ff1b5cea91081f325b5ada59#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("抖音研发实践"),e("OutboundLink")],1),a._v("。")]),a._v(" "),e("p",[a._v("原文里面对虚拟内存原理，Page Fault，order_file配置都有详细的介绍，我们要减少Page Fault次数，关键点就在于获取启动时用到的函数。本文介绍编译期插桩等方案来进行100%的符号覆盖，让重排达到最优效果。")]),a._v(" "),e("h4",{attrs:{id:"clang-插桩"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clang-插桩"}},[a._v("#")]),a._v(" Clang 插桩")]),a._v(" "),e("p",[a._v("llvm内置了一个简单的代码覆盖率检测（SanitizerCoverage）。它在函数级、基本块级和边缘级插入对用户定义函数的调用。我们这里借助于SanitizerCoverage进行插桩。可以看文档"),e("a",{attrs:{href:"https://clang.llvm.org/docs/SanitizerCoverage.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Clang 13 documentation"),e("OutboundLink")],1)]),a._v(" "),e("h4",{attrs:{id:"步骤"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[a._v("#")]),a._v(" 步骤")]),a._v(" "),e("p",[a._v("1、TARGETS --\x3e Build Settings --\x3e Other C Flags ---\x3e 添加 -fsanitize-coverage=func,trace-pc-guard")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[a._v("如果是Swift项目的话，还需要额外在 Other Swift Flags 中加入-sanitize-coverage=func 和 -sanitize=undefined\n")])])]),e("p",[e("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1240-20221209213857657.png",alt:"插桩.png"}})]),a._v(" "),e("p",[a._v("2、由于我们项目大量使用rn开发，连接了很多二进制文件。每个二进制文件又需要单独开启SanitizerCoverage，这里通过修改podfile来配置")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("post_install do |installer|\n  \n  installer.pods_project.targets.each do |target|\n      target.build_configurations.each do |config|\n        config.build_settings['OTHER_CFLAGS'] = '-fsanitize-coverage=func,trace-pc-guard'\n        config.build_settings['OTHER_SWIFT_FLAGS'] = '-sanitize-coverage=func -sanitize=undefined'\n      end\n    end\nend\n")])])]),e("p",[a._v("3、重写两个方法\n添加-fsanitize-coverage=func,trace-pc-guard之后，必须要实现两个方法一下是文档中方法")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('extern "C" void __sanitizer_cov_trace_pc_guard_init(uint32_t *start,\n                                                    uint32_t *stop) {\n  \n}\n')])])]),e("p",[a._v("两个参数分别是符号表开始与结束的地址，")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('extern "C" void __sanitizer_cov_trace_pc_guard(uint32_t *guard) {\n  \n}\n')])])]),e("p",[a._v("guard参数相当于一个哨兵，告诉我们是第几个被调用的")]),a._v(" "),e("p",[a._v("我在第二个方法里将每个符号加入原子队列，具体代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("static OSQueueHead symbolHead = OS_ATOMIC_QUEUE_INIT;\n\ntypedef struct{\n    void *pc;\n    void *next;\n} SYMNode;\n\nvoid __sanitizer_cov_trace_pc_guard(uint32_t *guard) {\n\n    void *PC = __builtin_return_address(0);\n    \n    SYMNode * node = malloc(sizeof(SYMNode));\n    *node = (SYMNode){PC,NULL};\n\n    OSAtomicEnqueue(&symbolHead, node, offsetof(SYMNode, next));\n}\n")])])]),e("p",[a._v("4、获取所有的符号，并写入文件，代码如下")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('+(void)creatOrderFile {\n    //定义数组\n    NSMutableArray *symbolNames = [NSMutableArray array];\n    \n    while (YES) {\n       SYMNode * node = OSAtomicDequeue(&symbolHead, offsetof(SYMNode, next));\n        if (node == NULL) {\n            break;\n        }\n        Dl_info info = {0};\n        dladdr(node->pc, &info);\n\n        NSString * name = @(info.dli_sname);\n        free(node);\n        \n        BOOL isObjc = [name hasPrefix:@"+["]||[name hasPrefix:@"-["];\n        NSString * symbolName = isObjc ? name : [@"_" stringByAppendingString:name];\n        [symbolNames addObject:symbolName];\n    }\n    //反向数组\n    NSEnumerator * enumerator = [symbolNames reverseObjectEnumerator];\n    \n    //创建一个新数组\n    NSMutableArray * funcs = [NSMutableArray arrayWithCapacity:symbolNames.count];\n    NSString * name;\n    //去重!\n    while (name = [enumerator nextObject]) {\n        if (![funcs containsObject:name]) {//数组中不包含name\n            [funcs addObject:name];\n        }\n    }\n    [funcs removeObject:[NSString stringWithFormat:@"%s",__FUNCTION__]];\n    //数组转成字符串\n    NSString * funcStr = [funcs componentsJoinedByString:@"\\n"];\n    \n    NSString * filePath = [NSTemporaryDirectory() stringByAppendingPathComponent:@"xzOrder.order"];\n\n    //文件内容\n    NSData * fileContents = [funcStr dataUsingEncoding:NSUTF8StringEncoding];\n    BOOL success = [[NSFileManager defaultManager] createFileAtPath:filePath contents:fileContents attributes:nil];\n    \n    NSLog(success?@"成功":@"失败");\n}\n')])])]),e("p",[a._v("也可以直接使用c函数写这个方法，前面加上导出符号extern。在别的文件内可以直接调用")]),a._v(" "),e("p",[a._v("5、拿到生成的order文件。由于是在真机上运行，文件也是存在真机沙盒中，可以通过如下方式下载手机上的app沙盒文件")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1240-20221209213917314.png",alt:"下载沙盒.png"}})]),a._v(" "),e("p",[a._v("6、配置沙盒文件到xcode中，在build setting中找到Order file选项，配置order文件的地址")]),a._v(" "),e("p",[a._v("7、结束了，多次重启手机，测量启动时间，以及Page Fault次数，然后求平均值，得到的结果是启动时间大约加快了10%-15%左右。如图")]),a._v(" "),e("p",[e("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1240-20221209213924656.png",alt:"对比.png"}})]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("优化手段都是辅助，主要的还是要养成好的代码习惯。开发过程中梳理好架构，合理取舍，减少动态库、ObjC类的数目，减少Category的数目。")]),a._v(" "),e("p",[a._v("废弃的代码文件或者资源文件及时删除。当然也可以使用脚本定期排查，后面我也会写相应脚本并补充上来")]),a._v(" "),e("p",[a._v("合理使用手机多核性能，避免主线程大量工作影响效率")])])}),[],!1,null,null,null);e.default=r.exports}}]);