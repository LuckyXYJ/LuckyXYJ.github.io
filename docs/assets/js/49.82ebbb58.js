(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{363:function(e,t,a){"use strict";a.r(t);var s=a(6),l=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"glkit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkit"}},[e._v("#")]),e._v(" GLKit")]),e._v(" "),t("p",[t("strong",[e._v("GLKit")]),e._v(" 使⽤数学库，背景纹理加载，预先创建的着色器效果，以及标准视图和视图控制器来实现渲染循环。")]),e._v(" "),t("p",[t("strong",[e._v("GLKView")]),e._v(" 提供绘制场所(View)")]),e._v(" "),t("p",[e._v("**GLKViewController ** 扩展于标准的UIKit 设计模式。 ⽤于绘制视图内容的管理与呈现.")]),e._v(" "),t("p",[e._v("​"),t("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/GLKView_diagram_2x.png",alt:"GLKView_diagram"}}),e._v("​")]),e._v(" "),t("h2",{attrs:{id:"使用glkit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用glkit"}},[e._v("#")]),e._v(" 使用GLKit")]),e._v(" "),t("p",[e._v("创建GLKView")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- (void)viewDidLoad {\n   [super viewDidLoad];\n   //创建OpenGL ES上下⽂并将其分配给从故事板加载的视图\n   GLKView * view =（GLKView *）self.view;\n   view.context = [[EAGLContext alloc] initWithAPI：kEAGLRenderingAPIOpenGLES2];\n   //配置视图创建的渲染缓冲区\n   view.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888; // 红绿蓝各占用8位\n   view.drawableDepthFormat = GLKViewDrawableDepthFormat24;\n   view.drawableStencilFormat = GLKViewDrawableStencilFormat8;\n   //启⽤多重采样\n   view.drawableMultisample = GLKViewDrawableMultisample4X;\n}\n")])])]),t("p",[e._v("实现drawRect")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("-(void)drawRect:(CGRect)rect {\n   //清除帧缓冲区\n   glClearColor（0.0f，0.0f，0.1f，1.0f）;\n   glClear（GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT）;\n\n  //使⽤先前配置的纹理，着⾊器和顶点数组绘制\n   glBindTexture（GL_TEXTURE_2D，_planetTexture）;\n   glUseProgram（_diffuseShading）;\n   glUniformMatrix4fv（_uniformModelViewProjectionMatrix，1,0，\n   _modelViewProjectionMatrix.m）;\n   glBindVertexArrayOES（_planetMesh）;\n   glDrawElements（GL_TRIANGLE_STRIP，256，GL_UNSIGNED_SHORT）;\n}\n")])])]),t("h2",{attrs:{id:"glkit-功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkit-功能"}},[e._v("#")]),e._v(" GLKit 功能")]),e._v(" "),t("ul",[t("li",[e._v("加载纹理")]),e._v(" "),t("li",[e._v("提供⾼性能的数学运算")]),e._v(" "),t("li",[e._v("提供常⻅的着⾊器")]),e._v(" "),t("li",[e._v("提供视图以及视图控制器")])]),e._v(" "),t("h2",{attrs:{id:"glkit纹理加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkit纹理加载"}},[e._v("#")]),e._v(" GLKit纹理加载")]),e._v(" "),t("p",[e._v("GLKTextureInfo 创建OpenGL 纹理信息")]),e._v(" "),t("ul",[t("li",[e._v("name: OpenGL 上下⽂中纹理名称")]),e._v(" "),t("li",[e._v("target: 纹理绑定的⽬标")]),e._v(" "),t("li",[e._v("height: 加载的纹理⾼度")]),e._v(" "),t("li",[e._v("width: 加载纹理的宽度")]),e._v(" "),t("li",[e._v("textureOrigin: 加载纹理中的原点位置")]),e._v(" "),t("li",[e._v("alphaState: 加载纹理中alpha分量状态")]),e._v(" "),t("li",[e._v("containsMipmaps: 布尔值,加载的纹理是否包含mip贴图")])]),e._v(" "),t("p",[e._v("初始化")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- initWithSharegroup: 初始化⼀个新的纹理加载到对象中\n- initWithShareContext: 初始化⼀个新的纹理加载对象\n")])])]),t("p",[e._v("从文件中加载处理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+ textureWithContentsOfFile:options:errer: 从⽂件加载2D纹理图像并从数据中\n\n- textureWithContentsOfFile:options:queue:completionHandler: 从⽂件中异步加载2D纹理图像,并根据数据创建新纹理\n")])])]),t("p",[e._v("从URL加载纹理")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- textureWithContentsOfURL:options:error: 从URL 加载2D纹理图像并从数据创建新纹理\n- textureWithContentsOfURL:options:queue:completionHandler: 从URL异步加载2D纹理图像,并根据数据创建新纹理.\n")])])]),t("p",[e._v("从内存中表示创建纹理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+ textureWithContentsOfData:options:errer: 从内存空间加载2D纹理图像,并根据数据创建新纹理\n- textureWithContentsOfData:options:queue:completionHandler:从内存空间异步加载2D纹理图像,并从数据中创建新纹理\n")])])]),t("p",[e._v("从CGImages创建纹理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- textureWithCGImage:options:error: 从Quartz图像 加载2D纹理图像并从数据创建新纹理\n- textureWithCGImage:options:queue:completionHandler: 从Quartz图像异步加载2D纹理图像,并根据数据创建新纹理.\n")])])]),t("p",[e._v("从URL加载多维创建纹理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+ cabeMapWithContentsOfURL:options:errer: 从单个URL加载⽴⽅体贴图纹理图像,并根据数据创建新纹理\n- cabeMapWithContentsOfURL:options:queue:completionHandler:从单个URL异步加载⽴⽅体贴图纹理图像,并根据数据创建新纹理\n")])])]),t("p",[e._v("从⽂件加载多维数据创建纹理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("+ cubeMapWithContentsOfFile:options:errer: 从单个⽂件加载⽴⽅体贴图纹理对象,并从数据中创建新纹理\n- cubeMapWithContentsOfFile:options:queue:completionHandler:从单个⽂件异步加载⽴⽅体贴图纹理对象,并从数据中创建新纹理\n+ cubeMapWithContentsOfFiles:options:errer: 从⼀系列⽂件中加载⽴⽅体贴图纹理图像,并从数据总创建新纹理\n- cubeMapWithContentsOfFiles:options:options:queue:completionHandler:从⼀系列⽂件异步加载⽴⽅体\n")])])]),t("h2",{attrs:{id:"glkit-opengl-es-视图渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkit-opengl-es-视图渲染"}},[e._v("#")]),e._v(" GLKit OpenGL ES 视图渲染")]),e._v(" "),t("h3",{attrs:{id:"glkview-使用opengl-es-绘制内容的视图默认实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkview-使用opengl-es-绘制内容的视图默认实现"}},[e._v("#")]),e._v(" GLKView 使⽤OpenGL ES 绘制内容的视图默认实现")]),e._v(" "),t("p",[e._v("• 初始化视图")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- initWithFrame:context: 初始化新视图\n")])])]),t("p",[e._v("• 代理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("delegate 视图的代理\n")])])]),t("p",[e._v("• 配置帧缓存区对象")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("drawableColorFormat 颜⾊渲染缓存区格式\ndrawableDepthFormat 深度渲染缓存区格式\ndrawableStencilFormat 模板渲染缓存区的格式\ndrawableMultisample 多重采样缓存区的格式\n")])])]),t("p",[e._v("• 帧缓存区属性")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("drawableHeight 底层缓存区对象的⾼度(以像素为单位)\ndrawableWidth 底层缓存区对象的宽度(以像素为单位)\n")])])]),t("p",[e._v("• 绘制视图的内容")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("context 绘制视图内容时使⽤的OpenGL ES 上下⽂\n- bindDrawable 将底层FrameBuffer 对象绑定到OpenGL ES\nenableSetNeedsDisplay 布尔值,指定视图是否响应使得视图内容⽆效的消息\n- display ⽴即重绘视图内容\nsnapshot 绘制视图内容并将其作为新图像对象返回\n")])])]),t("p",[e._v("• 删除视图FrameBuffer对象")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- deleteDrawable 删除与视图关联的可绘制对象\n")])])]),t("p",[e._v("•绘制视图的内容")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- glkView:drawInRect: 绘制视图内容 (必须实现代理) \n")])])]),t("p",[e._v("• 更新")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- (void) update 更新视图内容\n- (void) glkViewControllerUpdate:\n")])])]),t("p",[e._v("• 配置帧速率")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("preferredFramesPerSecond 视图控制器调⽤视图以及更新视图内容的速率\nframesPerSencond 视图控制器调⽤视图以及更新其内容的实际速率\n")])])]),t("p",[e._v("• 配置GLKViewController 代理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("delegate 视图控制器的代理\n")])])]),t("p",[e._v("• 控制帧更新")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("paused 布尔值,渲染循环是否已暂停\npausedOnWillResignActive 布尔值,当前程序重新激活活动状态时视图控制器是否⾃动暂停渲染循环\nresumeOnDidBecomeActive 布尔值,当前程序变为活动状态时视图控制是否⾃动恢复呈现循环\n")])])]),t("p",[e._v("• 获取有关View 更新信息")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("frameDisplayed 视图控制器⾃创建以来发送的帧更新数\ntimeSinceFirstResume ⾃视图控制器第⼀次恢复发送更新事件以来经过的时间量\ntimeSinceLastResume ⾃上次视图控制器恢复发送更新事件以来更新的时间量\ntimeSinceLastUpdate ⾃上次视图控制器调⽤委托⽅法以及经过的时间量\nglkViewControllerUpdate:\ntimeSinceLastDraw ⾃上次视图控制器调⽤视图display ⽅法以来经过的时间量.\n")])])]),t("h3",{attrs:{id:"glkviewcontrollerdelegate-渲染循环回调方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkviewcontrollerdelegate-渲染循环回调方法"}},[e._v("#")]),e._v(" GLKViewControllerDelegate 渲染循环回调⽅法")]),e._v(" "),t("p",[e._v("• 处理更新事件")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- glkViewControllerUpdate: 在显示每个帧之前调⽤\n")])])]),t("p",[e._v("• 暂停/恢复通知")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- glkViewController : willPause: 在渲染循环暂停或恢复之前调⽤. \n")])])]),t("h3",{attrs:{id:"glkbaseeffect-一种简单光照-着色系统-用于基于着色器opengl渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#glkbaseeffect-一种简单光照-着色系统-用于基于着色器opengl渲染"}},[e._v("#")]),e._v(" GLKBaseEffect ⼀种简单光照/着⾊系统,⽤于基于着⾊器OpenGL渲染")]),e._v(" "),t("p",[e._v("• 命名Effect")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("label 给Effect(效果)命名\n")])])]),t("p",[e._v("• 配置模型视图转换")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("transform 绑定效果时应⽤于顶点数据的模型视图,投影和纹理变换\n")])])]),t("p",[e._v("• 配置光照效果")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lightingType ⽤于计算每个⽚段的光照策略,GLKLightingType\nGLKLightingType\n\tGLKLightingTypePerVertex 表示在三⻆形中每个顶点执⾏光照计算,然后在三⻆形进⾏插值\n\tGLKLightingTypePerPixel 表示光照计算的输⼊在三⻆形内插⼊,并且在每个⽚段执⾏光照计算\n")])])]),t("p",[e._v("• 配置光照")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("lightModelTwoSided 布尔值,表示为基元的两侧计算光照\nmaterial 计算渲染图元光照使⽤的材质属性\nlightModelAmbientColor 环境颜⾊,应⽤效果渲染的所有图元.\nlight0 场景中第⼀个光照属性\nlight1 场景中第⼆个光照属性\nlight2 场景中第三个光照属性\n")])])]),t("p",[e._v("• 配置纹理")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("texture2d0 第⼀个纹理属性\ntexture2d1 第⼆个纹理属性\ntextureOrder 纹理应⽤于渲染图元的顺序\n")])])]),t("p",[e._v("• 配置雾化")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("fog 应⽤于场景的雾属性\n")])])]),t("p",[e._v("• 配置颜⾊信息")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("colorMaterialEnable 布尔值,表示计算光照与材质交互时是否使⽤颜⾊顶点属性\nuseConstantColor 布尔值,指示是否使⽤常量颜⾊\nconstantColor 不提供每个顶点颜⾊数据时使⽤常量颜⾊\n")])])]),t("p",[e._v("• 准备绘制效果")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("- prepareToDraw 准备渲染效果\n")])])])])}),[],!1,null,null,null);t.default=l.exports}}]);