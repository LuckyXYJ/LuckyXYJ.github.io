(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{361:function(t,a,v){"use strict";v.r(a);var _=v(6),e=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"状态机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态机"}},[t._v("#")]),t._v(" 状态机")]),t._v(" "),a("p",[t._v("记录对象在其⽣命周期内所经历的各种状态，或者根据输入改变对象的状态")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("记忆功能：记忆当前状态（如使用颜色、混合功能是否开启等）")]),t._v(" "),a("li",[t._v("接收输入：根据输入修改当前状态，且有相应输出")]),t._v(" "),a("li",[t._v("进入停机状态时，不再接受输入，且停止工作")])]),t._v(" "),a("p",[t._v("OpenGL状态机：")]),t._v(" "),a("ul",[a("li",[t._v("OpenGL可以记录⾃⼰的状态（如当前所使⽤的颜⾊、是否开启了混合 功能等）")]),t._v(" "),a("li",[t._v("OpenGL可以接收输⼊（当调⽤OpenGL函数的时候，实际上可以看成 OpenGL在接收我们的输⼊），如我们调⽤glColor3f，则OpenGL接收到 这个输⼊后会修改⾃⼰的“当前颜⾊”这个状态；")]),t._v(" "),a("li",[t._v("OpenGL可以进⼊停⽌状态，不再接收输⼊。在程序退出前，OpenGL总 会先停⽌⼯作的；")])]),t._v(" "),a("h2",{attrs:{id:"opengl上下文-context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl上下文-context"}},[t._v("#")]),t._v(" OpenGL上下文 Context")]),t._v(" "),a("p",[t._v("上下⽂是OpenGL指令执⾏的基础。它是⼀个⾮常庞⼤的状态机，保存了OpenGL中的各种状态")]),t._v(" "),a("p",[t._v("OpenGL的函数本质上都是对OpenGL上下⽂这个庞⼤的状态机中的某个状态或者对象进⾏操作")]),t._v(" "),a("p",[t._v("存在的问题：反复上下文切换/大量修改渲染状态，导致GPU开销较大")]),t._v(" "),a("ul",[a("li",[t._v("针对不同模块，创建不同的context进行状态管理，context之间共享纹理、缓冲区等资源")])]),t._v(" "),a("h2",{attrs:{id:"渲染-rendering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染-rendering"}},[t._v("#")]),t._v(" 渲染 Rendering")]),t._v(" "),a("p",[t._v("将图形/图像数据转换成3D空间图像操作叫做渲染(Rendering).")]),t._v(" "),a("h2",{attrs:{id:"顶点数组和顶点缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点数组和顶点缓冲区"}},[t._v("#")]),t._v(" 顶点数组和顶点缓冲区")]),t._v(" "),a("p",[t._v("顶点指的是我们在绘制⼀个图形时,它的顶点位置数据.⽽这个数据可以直接存储在数组中或者将其缓存到GPU内存中")]),t._v(" "),a("p",[t._v("顶点数据GPU处理")]),t._v(" "),a("p",[t._v("OpenGL中的图像都是由图元组成。在OpenGLES中，有3种类型的图 元：点、线、三⻆角形。")]),t._v(" "),a("p",[t._v("这些图元的存储：")]),t._v(" "),a("ul",[a("li",[t._v("开发者可以选择设定函数指针，在调⽤绘制⽅法的时候，直接由内存传⼊顶点数据，也就是说这部分数据之前是存储在内存当中的，被称为"),a("strong",[t._v("顶点数组")]),t._v("。")]),t._v(" "),a("li",[t._v("⽽性能更⾼的做法是，提前分配⼀块显存，将顶点数据预先传⼊到显存当 中。这部分的显存，就被称为"),a("strong",[t._v("顶点缓冲区")])])]),t._v(" "),a("h2",{attrs:{id:"管线、渲染流水线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管线、渲染流水线"}},[t._v("#")]),t._v(" 管线、渲染流⽔线")]),t._v(" "),a("p",[t._v("渲染流⽔线分为两种，其中⼀种为"),a("strong",[t._v("可编程渲染流⽔线")]),t._v("。另外⼀种为"),a("strong",[t._v("固定渲染流水线")]),t._v("。(也称可编程管线或固定管线，管线就是流⽔线的意思)。渲染流水线可否编程，取决于程序猿能否在顶点着色器以及⽚段着⾊器上进⾏编码。⽽现在的渲染流⽔线，基本都是可编程的，当然，它们也支持固定渲染流水线的功能")]),t._v(" "),a("p",[t._v("在OpenGL 下渲染图形,就会有经历⼀个⼀个节点。这些结点按照固定的顺序一个一个执行")]),t._v(" "),a("h3",{attrs:{id:"固定管线-存储着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#固定管线-存储着色器"}},[t._v("#")]),t._v(" 固定管线/存储着⾊器")]),t._v(" "),a("p",[t._v("一个封装了光照、坐标变换、裁剪等等诸多功能的Shader程序，开发者使用时，只需要传入相应参数，即可快速完成渲染。")]),t._v(" "),a("h2",{attrs:{id:"着色器程序shader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#着色器程序shader"}},[t._v("#")]),t._v(" 着色器程序Shader")]),t._v(" "),a("p",[a("strong",[t._v("Shader")]),t._v("，中⽂名，着⾊器。着⾊器其实就是⼀段在GPU运⾏的程序。我们平时的程序是在CPU运行。由于GPU的硬件设计结构与CPU有着很⼤的不同，所以GPU需要⼀些新的编程语⾔")]),t._v(" "),a("p",[t._v("常见的着⾊器主要有顶点着⾊器（VertexShader），⽚段着⾊器（FragmentShader）/像素着⾊器（PixelShader），⼏何着⾊器 （GeometryShader），曲⾯细分着⾊器（TessellationShader）。")]),t._v(" "),a("p",[t._v("直到OpenGLES3.0，依然只⽀持了顶点着⾊器和⽚段着⾊器这两个最基础的着⾊器。")]),t._v(" "),a("h2",{attrs:{id:"顶点着色器vertexshader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器vertexshader"}},[t._v("#")]),t._v(" 顶点着色器VertexShader")]),t._v(" "),a("p",[t._v("OpenGL中用来处理顶点相关代码的程序")]),t._v(" "),a("p",[t._v("确定顶点位置，处理图形每个顶点变换(旋转/平移/投影等)，将顶点坐标由自身坐标系转换到归一坐标系")]),t._v(" "),a("p",[t._v("是逐顶点运行的程序，即每个顶点数据都会执行一次，且是并行的")]),t._v(" "),a("h2",{attrs:{id:"片元着色器程序fragmentshader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器程序fragmentshader"}},[t._v("#")]),t._v(" 片元着色器程序FragmentShader")]),t._v(" "),a("p",[t._v("⽚段着⾊器是OpenGL中⽤于计算⽚段（像素）颜⾊的程序。处理图形中每个像素点颜⾊计算和填充")]),t._v(" "),a("p",[t._v("每个像素都会执⾏⼀次⽚段着⾊器，当然也 是并⾏的")]),t._v(" "),a("h2",{attrs:{id:"glsl【opengl-shading-language】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#glsl【opengl-shading-language】"}},[t._v("#")]),t._v(" GLSL【OpenGL Shading Language】")]),t._v(" "),a("p",[t._v("OpenGL中着色编程的语言")]),t._v(" "),a("p",[t._v("开发者可以使用该语言，自定义着色器")]),t._v(" "),a("h2",{attrs:{id:"光栅化rasterization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#光栅化rasterization"}},[t._v("#")]),t._v(" 光栅化Rasterization")]),t._v(" "),a("p",[t._v("是把顶点数据转换为⽚元的过程。")]),t._v(" "),a("p",[t._v("将⼏何图元变为⼆维图像的过程。")]),t._v(" "),a("p",[t._v("光栅化过程产⽣的是⽚元。")]),t._v(" "),a("p",[t._v("物体的数学描述以及与物体相关的颜⾊信息转换为屏幕上⽤于对应位置的像素及⽤于填充像素的颜⾊")]),t._v(" "),a("p",[t._v("将模拟信号转化为离散信号的过程。")]),t._v(" "),a("p",[t._v("其中包含两个步骤：")]),t._v(" "),a("ul",[a("li",[t._v("决定窗⼝坐标中的哪些整型栅格区域被基本图元占⽤")]),t._v(" "),a("li",[t._v("分配⼀个颜⾊值和⼀个深度值到各个区域。")])]),t._v(" "),a("p",[t._v("作⽤：具有将图转化为⼀个个栅格组成的图象")]),t._v(" "),a("p",[t._v("特点：是每个元素对应帧缓冲区中的⼀像素。")]),t._v(" "),a("h2",{attrs:{id:"纹理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纹理"}},[t._v("#")]),t._v(" 纹理")]),t._v(" "),a("p",[t._v("可以理解为图片")]),t._v(" "),a("p",[t._v("渲染图形时需要在其编码填充图⽚，这⾥使⽤的图⽚,就是常说的纹理.但是在OpenGL,我们更加习惯叫纹理,⽽不是图⽚.")]),t._v(" "),a("h3",{attrs:{id:"图像存储空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图像存储空间"}},[t._v("#")]),t._v(" 图像存储空间")]),t._v(" "),a("p",[t._v("图像存储空间 = 图像高度 * 图像宽度 * 每个像素的字节数")]),t._v(" "),a("h2",{attrs:{id:"混合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合"}},[t._v("#")]),t._v(" 混合")]),t._v(" "),a("p",[t._v("可以理解为两个图形/图像相交处的颜色，该颜色即为两个图形/图像颜色的混合。")]),t._v(" "),a("p",[t._v("混合的算法可以通过OpenGL的函数进⾏指定。或者通过像素着⾊器进⾏实现。但是像素着⾊器实现性能相对差点")]),t._v(" "),a("h2",{attrs:{id:"变换矩阵-transformation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变换矩阵-transformation"}},[t._v("#")]),t._v(" 变换矩阵 Transformation")]),t._v(" "),a("p",[t._v("处理图形平移,缩放,旋转变换")]),t._v(" "),a("h2",{attrs:{id:"投影矩阵-projection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#投影矩阵-projection"}},[t._v("#")]),t._v(" 投影矩阵 Projection")]),t._v(" "),a("p",[t._v("将3D坐标转换为2D屏幕坐标时使用")]),t._v(" "),a("h2",{attrs:{id:"渲染上屏-交换缓冲区swapbuffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染上屏-交换缓冲区swapbuffer"}},[t._v("#")]),t._v(" 渲染上屏/交换缓冲区SwapBuffer")]),t._v(" "),a("p",[t._v("渲染上屏：图像直接渲染到窗⼝对应的渲染缓冲区")]),t._v(" "),a("p",[t._v("渲染缓冲区：可以理解为是系统的资源，例如窗口")]),t._v(" "),a("h2",{attrs:{id:"双缓冲区和垂直同步技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双缓冲区和垂直同步技术"}},[t._v("#")]),t._v(" 双缓冲区和垂直同步技术")]),t._v(" "),a("p",[t._v("双缓冲区解决问题：单缓冲区，在绘制过程中屏幕进⾏了刷新，窗⼝可能显示出不完整的图像")]),t._v(" "),a("p",[t._v("双缓冲区。显示在屏幕上的称为屏幕缓冲区，没有显示的称为离屏缓冲区。在⼀个缓冲区渲染完成之后，通过将屏幕缓冲区和离屏缓冲区交换，实现图像在屏幕上的显示。")]),t._v(" "),a("p",[t._v("垂直同步技术解决问题：防⽌交换缓冲区的时候屏幕上下区域的图像分属于两个不同的帧，因此交换⼀般会等待显示器刷新完成的信号，即垂直同步信号")]),t._v(" "),a("h2",{attrs:{id:"三缓冲区技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三缓冲区技术"}},[t._v("#")]),t._v(" 三缓冲区技术")]),t._v(" "),a("p",[t._v("三缓冲区解决问题：使⽤了双缓冲区和垂直同步技术之后，由于总是要等待缓冲区交换之后再进⾏下⼀帧的渲染。")]),t._v(" "),a("p",[t._v("在等待垂直同步时，来回交替渲染两个离屏的缓冲区，⽽垂直同步发⽣时，屏幕缓冲区和最近渲染完成的离屏缓冲区交换，实现充分利⽤硬件性能的⽬的")]),t._v(" "),a("h2",{attrs:{id:"_2d-3d笛卡尔坐标系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2d-3d笛卡尔坐标系"}},[t._v("#")]),t._v(" 2D/3D笛卡尔坐标系")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/2-20220708143139089.png",alt:"img"}}),t._v("​")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/2-20220708143139089.png",alt:"img"}}),t._v("​")]),t._v(" "),a("p",[a("strong",[t._v("坐标裁剪："),a("strong",[t._v("​"),a("code",[t._v("窗口是以像素为单位进行度量的")]),t._v("​。开始在窗口中绘制点、线和形状之前，要把指定的笛卡尔坐标对翻译成屏幕坐标，我们可以通过指定占据窗口的笛卡尔区域来转换，这个区域叫做")]),t._v("裁剪区域")])]),t._v(" "),a("p",[a("strong",[t._v("左右手坐标系：")])]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220708144710519.png",alt:"image-20220708144710519"}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"视口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#视口"}},[t._v("#")]),t._v(" 视口")]),t._v(" "),a("p",[t._v("视口（viewport）就是浏览器显示页面内容的屏幕区域。")]),t._v(" "),a("p",[t._v("视口可以分为布局视口、视觉视口和理想视口")]),t._v(" "),a("p",[t._v("在OpenGL中，视口就是窗口内部用于绘制裁剪区域的客户区域、")]),t._v(" "),a("p",[t._v("坐标系统从笛卡尔坐标到物理屏幕像素的映射是通过视口(viewport)的设置来指定")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 视口的设定通过glViewport()函数实现的：\nvoid glViewport(GLint x,GLint y,GLint width,GLint ehignt);\n//它设置窗口的左下角，以及宽度和高度。\n")])])]),a("p",[t._v("视口一般和窗口是等比的")]),t._v(" "),a("h2",{attrs:{id:"投影"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#投影"}},[t._v("#")]),t._v(" 投影")]),t._v(" "),a("p",[t._v("透视投影和正投影")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220708143945494.png",alt:"image-20220708143945494"}}),t._v("​")]),t._v(" "),a("p",[t._v("正投影(Orthographics Projection)或平行投影")]),t._v(" "),a("ul",[a("li",[t._v("视景体：正方形/长方形")]),t._v(" "),a("li",[t._v("不存在近大远小")]),t._v(" "),a("li",[t._v("适合平面图形/2D图形渲染")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GLFrustum::SetOrthographic(GLfloat xMin, GLfloat xMax, GLfloat yMin, GLfloat yMax, GLfloat zMin, GLfloat zMax)\n")])])]),a("p",[t._v("透视投影")]),t._v(" "),a("ul",[a("li",[t._v("视景体：平截体")]),t._v(" "),a("li",[t._v("近大远小")]),t._v(" "),a("li",[t._v("适合使3D图像渲染")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GLFrustum::SetPerspective(**float** fFov, **float** fAspect, **float** fNear, **float** fFar)\n")])])]),a("p",[t._v("setPerspective ⽅方法为我们构建⼀一个平截头体")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220714174625193.png",alt:"image-20220714174625193"}}),t._v("​")]),t._v(" "),a("p",[t._v("参数：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("fFov:垂直⽅方向上的视场⻆角度")])]),t._v(" "),a("li",[a("p",[t._v("fAspect:窗⼝口的宽度与⾼高度的纵横⽐")])]),t._v(" "),a("li",[a("p",[t._v("fNear:近裁剪⾯面距离")])]),t._v(" "),a("li",[a("p",[t._v("fFar:远裁剪⾯面距离")]),t._v(" "),a("p",[t._v("纵横⽐ = 宽(w)/⾼高(h)")])])]),t._v(" "),a("h2",{attrs:{id:"坐标系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#坐标系"}},[t._v("#")]),t._v(" 坐标系")]),t._v(" "),a("p",[t._v("OpenGL里每个顶点的x,y,z都应该在−1到1之间，超出这个范围的顶点将是不可见")]),t._v(" "),a("p",[t._v("共有5中比较重要的坐标系系统")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("局部空间(Local Space，或者称为物体空间(Object Space))")])]),t._v(" "),a("li",[a("strong",[t._v("世界空间(World Space)")])]),t._v(" "),a("li",[a("strong",[t._v("观察空间(View Space，或者称为视觉空间(Eye Space))")])]),t._v(" "),a("li",[a("strong",[t._v("裁剪空间(Clip Space)")])]),t._v(" "),a("li",[a("strong",[t._v("屏幕空间(Screen Space)")])])]),t._v(" "),a("p",[t._v("坐标转换过程")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220708151652305.png",alt:"image-20220708151652305"}}),t._v("​")]),t._v(" "),a("h3",{attrs:{id:"model-matrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#model-matrix"}},[t._v("#")]),t._v(" Model Matrix")]),t._v(" "),a("p",[t._v("模型变化，物体坐标转换为世界坐标，需要经历旋转+平移两个过程，为了方便其中加入了惯性坐标系。整个过程分为两步")]),t._v(" "),a("p",[t._v("1、物体坐标旋转后变成惯性坐标")]),t._v(" "),a("p",[t._v("2、惯性坐标平移后变成世界坐标")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/70.jpeg",alt:"img"}}),t._v("​")]),t._v(" "),a("h3",{attrs:{id:"view-matrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-matrix"}},[t._v("#")]),t._v(" View Matrix")]),t._v(" "),a("p",[t._v("视变换，世界坐标转换为观察者坐标")]),t._v(" "),a("h3",{attrs:{id:"projection-matrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#projection-matrix"}},[t._v("#")]),t._v(" Projection Matrix")]),t._v(" "),a("p",[t._v("投影变换，观察者坐标转换为裁剪坐标")]),t._v(" "),a("h3",{attrs:{id:"viewport-transform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#viewport-transform"}},[t._v("#")]),t._v(" ViewPort Transform")]),t._v(" "),a("p",[t._v("视口变换，裁剪坐标转换为屏幕坐标")]),t._v(" "),a("p",[t._v("其中分为两步：")]),t._v(" "),a("p",[t._v("1、perspective divide透视算法，将裁剪坐标转换为规范化设备坐标")]),t._v(" "),a("p",[t._v("2、viewport mapping 视口变化，将规范化设备坐标转换为屏幕坐标")]),t._v(" "),a("h3",{attrs:{id:"开发者可操作部分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发者可操作部分"}},[t._v("#")]),t._v(" 开发者可操作部分")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220708153135169.png",alt:"image-20220708153135169"}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"opengl-变换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl-变换"}},[t._v("#")]),t._v(" OpenGL 变换")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("变换")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("应⽤")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("视图")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("指定观察者位置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("模型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("在场景中移动物体")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("模型视图")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("描述视图/模型变换的二元性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("投影")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("改变视景体⼤小和设置它的投影⽅式")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("视⼝")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("伪变化,对窗口上最终输出进⾏缩放")])])])]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220726165520953.png",alt:"image-20220726165520953"}}),t._v("​")])])}),[],!1,null,null,null);a.default=e.exports}}]);