(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{376:function(a,t,e){"use strict";e.r(t);var r=e(6),s=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"创建静态库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建静态库"}},[a._v("#")]),a._v(" 创建静态库")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("libtool -static -arch_only x86_64 a.o -o a.a\n\nlibtool -static -arch_only arm64 -D -syslibroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.plat form/Developer/SDKs/iPhoneOS13.6.sdk test.o -o libTest.a\n")])])]),t("h2",{attrs:{id:"创建动态库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建动态库"}},[a._v("#")]),a._v(" 创建动态库")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("clang -dynamiclib -target arm64-apple-ios13.5 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhon eOS.platform/Developer/SDKs/iPhoneOS13.6.sdk a.o -o a.dylib\n")])])]),t("h2",{attrs:{id:"ar命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ar命令"}},[a._v("#")]),a._v(" ar命令")]),a._v(" "),t("p",[a._v("​"),t("code",[a._v("ar")]),a._v("​压缩目标文件，并对其进行编号和索引，形成静态库。同时也可以解压缩静态库，查看有哪些目标文件：")]),a._v(" "),t("p",[a._v("ar -rc a.a a.o")]),a._v(" "),t("ul",[t("li",[a._v("-r: 像a.a添加or替换文件")]),a._v(" "),t("li",[a._v("-c: 不输出任何信息")]),a._v(" "),t("li",[a._v("-t: 列出包含的目标文件")])]),a._v(" "),t("h2",{attrs:{id:"合并静态库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并静态库"}},[a._v("#")]),a._v(" 合并静态库")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("libtool -static -o <OUTPUT NAME> <LIBRARY_1> <LIBRARY_2>\n")])])]),t("h2",{attrs:{id:"clang-命令参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#clang-命令参数"}},[a._v("#")]),a._v(" clang 命令参数：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("clang命令参数：\n     -x: 指定编译文件语言类型\n     -g: 生成调试信息\n     -c: 生成目标文件，只运行preprocess，compile，assemble，不链接\n     -o: 输出文件\n     -isysroot: 使用的SDK路径\n     1. -I<directory> 在指定目录寻找头文件 header search path\n     2. -L<dir> 指定库文件路径（.a\\.dylib库文件） library search path\n     3. -l<library_name> 指定链接的库文件名称（.a\\.dylib库文件）other link flags -lAFNetworking\n     -F<directory> 在指定目录寻找framework framework search path\n     -framework <framework_name> 指定链接的framework名称 other link flags -framework AFNetworking\n   \n")])])]),t("h2",{attrs:{id:"install-name-tool命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#install-name-tool命令"}},[a._v("#")]),a._v(" install_name_tool命令")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("install_name_tool -add_rpath <directory> libs_File \ninstall_name_tool -delete_rpath <directory> libs_File \ninstall_name_tool -rpath <old> <new> libs_File\n")])])]),t("h2",{attrs:{id:"编译优化设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编译优化设置"}},[a._v("#")]),a._v(" 编译优化设置")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("优化⽬标")]),a._v(" "),t("th",[a._v("可⽤的优化级别")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("较⼩的代码尺⼨")]),a._v(" "),t("td",[a._v("-Oz")])]),a._v(" "),t("tr",[t("td",[a._v("性能优先，性能更⾼")]),a._v(" "),t("td",[a._v("-Oz, -O3, -Ofast")])]),a._v(" "),t("tr",[t("td",[a._v("调试优先")]),a._v(" "),t("td",[a._v("-O1")])]),a._v(" "),t("tr",[t("td",[a._v("更快的编译和构建时间")]),a._v(" "),t("td",[a._v("-O0")])]),a._v(" "),t("tr",[t("td",[a._v("平衡代码⼤⼩和编译性能")]),a._v(" "),t("td",[a._v("-Os")])])])]),a._v(" "),t("p",[a._v("‍")])])}),[],!1,null,null,null);t.default=s.exports}}]);