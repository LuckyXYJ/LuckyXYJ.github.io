(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{318:function(s,a,t){"use strict";t.r(a);var e=t(6),c=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"oc的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oc的本质"}},[s._v("#")]),s._v(" OC的本质")]),s._v(" "),a("p",[s._v("oc代码，底层是由c/c++实现")]),s._v(" "),a("p",[s._v("Objective-C的面向对象都是基于C\\C++的数据结构实现的")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220531152830996.png",alt:"image-20220531152830996"}})]),s._v(" "),a("p",[s._v("可以将Objective-C代码转换为C\\C++代码")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("xcrun  -sdk  iphoneos  clang  -arch  arm64  -rewrite-objc OC源文件 -o 输出的CPP文件\n// 如果需要链接其他框架，使用-framework参数。比如-framework UIKit\n")])])]),a("h2",{attrs:{id:"oc对象的本质"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oc对象的本质"}},[s._v("#")]),s._v(" OC对象的本质")]),s._v(" "),a("p",[s._v("NSObject的底层实现")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('@interface NSObject <NSObject> {\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored "-Wobjc-interface-ivars"\n    Class isa  OBJC_ISA_AVAILABILITY;\n#pragma clang diagnostic pop\n}\n\n// 以上OC代码转为C++代码后，\nstruct NSObject_IMPL {\n\tClass isa;\n};\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("@interface Person : NSObject\n{\n    @public\n    int _age;\n}\n@property (nonatomic, assign) int height;\n@end\n\n// 以上OC代码转为C++代码后，\nstruct Person_IMPL {\n\tstruct NSObject_IMPL NSObject_IVARS;\n\tint _age;\n\tint _height;\n};\n\n// Student\n@interface Student : Person\n{\n    int _no;\n//    int _sex;\n}\n@end\n")])])]),a("h3",{attrs:{id:"一个person对象、一个student对象占用多少内存空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个person对象、一个student对象占用多少内存空间"}},[s._v("#")]),s._v(" 一个Person对象、一个Student对象占用多少内存空间？")]),s._v(" "),a("p",[s._v("Person 8+4+4")]),s._v(" "),a("p",[s._v("Student 16+4 = 20。内存对齐后占用2")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 创建一个实例对象，至少需要多少内存？\n#import <objc/runtime.h>\nclass_getInstanceSize([NSObject class]);\n\n// 创建一个实例对象，实际上分配了多少内存？\n#import <malloc/malloc.h>\nmalloc_size((__bridge const void *)obj);\n")])])]),a("h4",{attrs:{id:"内存对齐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存对齐"}},[s._v("#")]),s._v(" 内存对齐")]),s._v(" "),a("p",[s._v("1、数据成员对⻬规则：每个数据成员存储的起始位置要从该成员大小或者成员的子成员大小的整数倍开始")]),s._v(" "),a("p",[s._v("2、结构体作为成员：如果一个结构里有某些结构体成员,则结构体成员要从其内部最大元素大小的整数倍地址开始存储.")]),s._v(" "),a("p",[s._v("3、结构体的总⼤⼩,也就是sizeof的结果,.必须是其内部最⼤成员的整数倍.不⾜的要补⻬")]),s._v(" "),a("p",[s._v("(x + (8-1)) & ~(8-1)")]),s._v(" "),a("p",[s._v("(x + (8-1)) >> 3 << 3")]),s._v(" "),a("h4",{attrs:{id:"结构体内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体内存"}},[s._v("#")]),s._v(" 结构体内存")]),s._v(" "),a("p",[s._v("结构体指针大小 8\n结构体大小 根据结构体内部数据计算\n结构体的总大小,也就是sizeof的结果,必须是其内部最大成员的整数倍.不足的要补⻬")]),s._v(" "),a("h4",{attrs:{id:"内存占用也可以通过以下方式查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存占用也可以通过以下方式查看"}},[s._v("#")]),s._v(" 内存占用也可以通过以下方式查看")]),s._v(" "),a("p",[s._v("Debug -> Debug Workfllow -> View Memory （Shift + Command + M）")]),s._v(" "),a("h2",{attrs:{id:"oc对象的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oc对象的分类"}},[s._v("#")]),s._v(" OC对象的分类")]),s._v(" "),a("p",[s._v("Objective-C中的对象，简称OC对象，主要可以分为3种")]),s._v(" "),a("ul",[a("li",[s._v("instance对象（实例对象）")]),s._v(" "),a("li",[s._v("class对象（类对象）")]),s._v(" "),a("li",[s._v("meta-class对象（元类对象）")])]),s._v(" "),a("h3",{attrs:{id:"instance对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instance对象"}},[s._v("#")]),s._v(" instance对象")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220531175925368.png",alt:"image-20220531175925368"}})]),s._v(" "),a("p",[s._v("object1、object2是NSObject的instance对象（实例对象）")]),s._v(" "),a("p",[s._v("它们是不同的两个对象，分别占据着两块不同的内存")]),s._v(" "),a("p",[s._v("instance对象就是通过类alloc出来的对象，每次调用alloc都会产生新的instance对象")]),s._v(" "),a("p",[s._v("instance对象在内存中存储的信息包括")]),s._v(" "),a("ul",[a("li",[s._v("isa指针")]),s._v(" "),a("li",[s._v("其他成员变量")])]),s._v(" "),a("h3",{attrs:{id:"class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class对象"}},[s._v("#")]),s._v(" class对象")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220531175849847.png",alt:"image-20220531175849847"}})]),s._v(" "),a("p",[s._v("objectClass1 ~ objectClass5都是NSObject的class对象（类对象）")]),s._v(" "),a("p",[s._v("每个类在内存中有且只有一个class对象")]),s._v(" "),a("p",[s._v("class对象在内存中存储的信息主要包括")]),s._v(" "),a("ul",[a("li",[s._v("isa指针")]),s._v(" "),a("li",[s._v("superclass指针")]),s._v(" "),a("li",[s._v("类的属性信息（@property）、")]),s._v(" "),a("li",[s._v("类的对象方法信息（instance method）")]),s._v(" "),a("li",[s._v("类的协议信息（protocol）、")]),s._v(" "),a("li",[s._v("类的成员变量信息（ivar）")])]),s._v(" "),a("h3",{attrs:{id:"meta-class对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#meta-class对象"}},[s._v("#")]),s._v(" meta-class对象")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220531180004913.png",alt:"image-20220531180004913"}})]),s._v(" "),a("p",[s._v("objectMetaClass是NSObject的meta-class对象（元类对象）")]),s._v(" "),a("p",[s._v("每个类在内存中有且只有一个meta-class对象")]),s._v(" "),a("p",[s._v("meta-class对象和class对象的内存结构是一样的，但是用途不一样，在内存中存储的信息主要包括")]),s._v(" "),a("ul",[a("li",[s._v("isa指针")]),s._v(" "),a("li",[s._v("superclass指针")]),s._v(" "),a("li",[s._v("类的类方法信息（class method）")]),s._v(" "),a("li",[s._v("......")])]),s._v(" "),a("p",[s._v("注意：以下代码获取的objectClass是class对象，并不是meta-class对象")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Class objClass = [[NSObject class] class];\n")])])]),a("p",[s._v("查看su")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("BOOL result = class_isMetaClass([NSObject class]);\n")])])]),a("h2",{attrs:{id:"对象内指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象内指针"}},[s._v("#")]),s._v(" 对象内指针")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220531220610504.png",alt:"image-20220531220610504"}})]),s._v(" "),a("h3",{attrs:{id:"isa指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isa指针"}},[s._v("#")]),s._v(" isa指针")]),s._v(" "),a("p",[s._v("instance的isa指向class")]),s._v(" "),a("p",[s._v("当调用对象方法时，通过instance的isa找到class，最后找到对象方法的实现进行调用")]),s._v(" "),a("p",[s._v("class的isa指向meta-class")]),s._v(" "),a("p",[s._v("当调用类方法时，通过class的isa找到meta-class，最后找到类方法的实现进行调用")]),s._v(" "),a("p",[s._v("从64bit开始，isa需要进行一次位运算，才能计算出真实地址")]),s._v(" "),a("h3",{attrs:{id:"class对象的superclass指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#class对象的superclass指针"}},[s._v("#")]),s._v(" class对象的superclass指针")]),s._v(" "),a("p",[s._v("当Student的instance对象要调用Person的对象方法时，会先通过isa找到Student的class，然后通过superclass找到Person的class，最后找到对象方法的实现进行调用")]),s._v(" "),a("p",[s._v("当Student的class要调用Person的类方法时，会先通过isa找到Student的meta-class，然后通过superclass找到Person的meta-class，最后找到类方法的实现进行调用")])])}),[],!1,null,null,null);a.default=c.exports}}]);