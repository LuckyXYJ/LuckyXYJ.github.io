(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{360:function(t,a,e){"use strict";e.r(a);var n=e(6),_=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"opengl-es"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl-es"}},[t._v("#")]),t._v(" OpenGL ES")]),t._v(" "),a("p",[t._v("OpenGL ES (OpenGL for Embedded Systems)是以⼿持和嵌入式为⽬标的⾼级3D图形应用程序编程接⼝")]),t._v(" "),a("p",[t._v("OpenGL ES是OpenGL的简化版本，它消除了冗余功能，提供了一个既易于学习⼜更易于在移动图形硬件中实现的库")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220802134528263.png",alt:"image-20220802134528263"}}),t._v("​")]),t._v(" "),a("p",[t._v("OpenGL ES允许应⽤程序利用"),a("strong",[t._v("底层图形处理器")]),t._v("的强⼤功能。iOS设备上的GPU可以执行复杂的2D和3D绘图，以及最终图像中每个像素的复杂着色计算")]),t._v(" "),a("p",[t._v("OpenGL ES 命令需要"),a("strong",[t._v("渲染上下⽂")]),t._v("和"),a("strong",[t._v("绘制表面")]),t._v("才能完成图形图像的绘制")]),t._v(" "),a("p",[t._v("渲染上下文: 存储相关OpenGL ES 状态.")]),t._v(" "),a("p",[t._v("绘制表⾯: 是⽤于绘制图元的表面,它指定渲染所需要的缓存区类型,例如颜⾊缓存区,深度缓冲区和模板缓存区.")]),t._v(" "),a("h3",{attrs:{id:"egl-embedded-graphics-library"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#egl-embedded-graphics-library"}},[t._v("#")]),t._v(" EGL (Embedded Graphics Library )")]),t._v(" "),a("p",[t._v("OpenGL ES API 并没有提供如何创建渲染上下文或者上下⽂如何连接到原⽣窗口系统. EGL 是Khronos 渲染API(如OpenGL ES) 和原生窗⼝系统之间的接口. 唯⼀支持 OpenGL ES 却不支持EGL 的平台是iOS. Apple 提供⾃己的EGL API的iOS实现,称为"),a("strong",[t._v("EAGL")]),t._v(".")]),t._v(" "),a("p",[t._v("因为每个窗⼝系统都有不同的定义,所以EGL提供基本的不透明类型—EGLDisplay, 这个类型封装了所有系统相关性,⽤于和原生窗口系统接⼝.")]),t._v(" "),a("p",[t._v("EGL的主要功能：")]),t._v(" "),a("ol",[a("li",[t._v("和本地窗口系统(native windowing system)通讯;")]),t._v(" "),a("li",[t._v("查询可用的配置;")]),t._v(" "),a("li",[t._v("创建OpenGL ES可用的“绘图表面”(drawing surface);")]),t._v(" "),a("li",[t._v("同步不同类别的API之间的渲染，⽐如在OpenGL ES和OpenVG之间同步，或者在OpenGL和本地窗口的绘图命令之间")]),t._v(" "),a("li",[t._v("管理“渲染资源”，⽐如纹理映射(rendering map)。")])]),t._v(" "),a("h3",{attrs:{id:"opengles-错误处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengles-错误处理"}},[t._v("#")]),t._v(" OpenGLES 错误处理")]),t._v(" "),a("p",[t._v("如果不正确使⽤OpenGL ES 命令,应⽤程序就会产⽣一个错误编码. 这个错误编码将被记录,可以用glGetError查询. 在应⽤程序用glGetError查询第⼀个错误代码之前,不会记录其他错误代码. 一旦查询到错误代码,当前错误代码便复位为GL_NO_ERROR")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("错误代码")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("GL_NO_ERROR")]),t._v(" "),a("td",[t._v("从上⼀次调用glGetError 以来没有生成任何错误")])]),t._v(" "),a("tr",[a("td",[t._v("GL_INVALID_ENUM")]),t._v(" "),a("td",[t._v("GLenum 参数超出范围，忽略生成错误命令")])]),t._v(" "),a("tr",[a("td",[t._v("GL_INVALID_VALUE")]),t._v(" "),a("td",[t._v("数值型 参数超出范围，忽略生成错误命令")])]),t._v(" "),a("tr",[a("td",[t._v("GL_INVALID_OPERATION")]),t._v(" "),a("td",[t._v("特定命令在当前OpenGL ES 状态⽆法执⾏")])]),t._v(" "),a("tr",[a("td",[t._v("GL_OUT_OF_MEMORY")]),t._v(" "),a("td",[t._v("内存不⾜时执⾏该命令,如果遇到这个错误,除⾮当前错误代码,否则OpenGL ES 管线的状态被认为未定义")])])])]),t._v(" "),a("h2",{attrs:{id:"opengl-es-3-0图形管线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl-es-3-0图形管线"}},[t._v("#")]),t._v(" OpenGL ES 3.0图形管线")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220802135104291.png",alt:"image-20220802135104291"}}),t._v("​")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/677.png",alt:"img"}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"顶点着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器"}},[t._v("#")]),t._v(" 顶点着色器")]),t._v(" "),a("p",[t._v("顶点着色器输入：")]),t._v(" "),a("ol",[a("li",[t._v("着⾊器程序----描述顶点上执⾏操作的顶点着⾊器程序源代码/可执行⽂件")]),t._v(" "),a("li",[t._v("顶点着色器输入(属性) ---- ⽤顶点数组提供每个顶点的数据")]),t._v(" "),a("li",[t._v("统⼀变量(uniform) ---- 顶点/⽚元着⾊器使⽤的不变数据")]),t._v(" "),a("li",[t._v("采样器 ---- 代表顶点着⾊器使用纹理的特殊统⼀变量类型.")])]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1200.png",alt:"img"}}),t._v("​")]),t._v(" "),a("p",[t._v("顶点着色器业务：")]),t._v(" "),a("ol",[a("li",[t._v("矩阵变换位置")]),t._v(" "),a("li",[t._v("计算光照公式生成逐顶点颜色")]),t._v(" "),a("li",[t._v("生成/变换纹理坐标")])]),t._v(" "),a("p",[t._v("总结: 顶点着色器可以用于执行⾃定义计算,实施新的变换,照明或者传统的固定功能所不允许的基于顶点的效果.")]),t._v(" "),a("p",[t._v("顶点着色器代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*\n  示例说明：\n  顶点着色器取得一个位置及相关的颜色数据作为输人属性，\n  用一个4x4矩阵变换位置，\n  并输出变换后的位置和颜色。\n*/\n\n/* matrix to convert a_ position \n  from model space\n  to normalized device space\n*/\nuniform mat4 u_mvpMatrix; \n\n// attributes input to the vertex shader\nin vec4 a_position;    // position value\nin vec4 a_color ;      // input vertex color\n\n// output of the vertex shader - input to fragment\n// shader\nout vec4 v_color;  // output vertex color\nvoid main()\n{\n  v_ color = a_color ;\n  gl_Position = u_mvpMatrix * a_position;\n}\n")])])]),a("h3",{attrs:{id:"顶点着色器内建特殊变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器内建特殊变量"}},[t._v("#")]),t._v(" 顶点着色器内建特殊变量")]),t._v(" "),a("p",[t._v("gl_VertexID gl_InstanceID gl_Position gl_PointSize gl_FrontFacing")]),t._v(" "),a("h3",{attrs:{id:"顶点着色器内建uniform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器内建uniform"}},[t._v("#")]),t._v(" 顶点着色器内建uniform")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("struct gl_DepthRangeParameters {\n\thighp float near; //near z \n\thighp float far; //near far \n\thighp float diff; //far - near\n}\nuniform gl_DepthRangeParameters gl_DepthRange;\n")])])]),a("h3",{attrs:{id:"顶点着色器内建常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顶点着色器内建常量"}},[t._v("#")]),t._v(" 顶点着色器内建常量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const mediump int gl_MaxVertexAttribs = 16;\nconst mediump int gl_MaxVertexUniformVectors = 256; \nconst mediump int gl_MaxVertexOutputVectors = 16;\nconst mediump int gl_MaxVertexTextureImageUnits = 16; \nconst mediump int gl_MaxCombinedTextureImageUnits = 32;\n")])])]),a("h2",{attrs:{id:"图元装配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图元装配"}},[t._v("#")]),t._v(" 图元装配")]),t._v(" "),a("p",[t._v("图元(Primitive): 点,线,三⻆形等.")]),t._v(" "),a("p",[t._v("图元装配: 将顶点数据计算成⼀个个图元.在这个阶段会执⾏裁剪、透视分割和 Viewport变换操作。")]),t._v(" "),a("p",[t._v("图元类型和顶点索确定将被渲染的单独图元。对于每个单独图元及其对应的顶点，图元装配阶段执⾏的操作包括: 将顶点着⾊器的输出值执行裁剪、透视分割、视⼝变换后进⼊光栅化阶段。")]),t._v(" "),a("h2",{attrs:{id:"光栅化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#光栅化"}},[t._v("#")]),t._v(" 光栅化")]),t._v(" "),a("p",[t._v("这个阶段绘制对应的图元(点/线/三角形).")]),t._v(" "),a("p",[t._v("光栅化就是将图元转化成⼀组⼆维⽚段的过程.⽽这些转化的⽚段将由⽚元着⾊器处理。这些⼆维⽚段就是屏幕上可绘制的像素.")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1200-20220802142457833.png",alt:"img"}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"片元着色器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器"}},[t._v("#")]),t._v(" 片元着色器")]),t._v(" "),a("p",[t._v("⽚元着⾊器/⽚段着⾊器 输⼊:")]),t._v(" "),a("ol",[a("li",[t._v("着⾊器程序 ---- 描述⽚段上执⾏操作的片元着⾊器程序源代码/可执⾏文件")]),t._v(" "),a("li",[t._v("输⼊变量 ---- 光栅化单元⽤插值为每个⽚段⽣成的顶点着⾊器输出")]),t._v(" "),a("li",[t._v("统⼀变量(uniform) ---- 顶点/⽚元着色器使⽤的不变数据")]),t._v(" "),a("li",[t._v("采样器 ---- 代表⽚元着⾊器使⽤纹理的特殊统⼀变量类型.")])]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1200-20220802143215216.png",alt:"img"}}),t._v("​")]),t._v(" "),a("p",[t._v("片元着色器业务：")]),t._v(" "),a("ol",[a("li",[t._v("计算颜⾊")]),t._v(" "),a("li",[t._v("获取纹理理值")]),t._v(" "),a("li",[t._v("往像素点中填充颜⾊值(纹理值/颜色值);")])]),t._v(" "),a("p",[t._v("总结: 它可以⽤于图片/视频/图形中每个像素的颜⾊填充(⽐如给视频添加滤镜,实际上就是将视频中每个图⽚的像素点颜⾊填充进行修改.)")]),t._v(" "),a("p",[t._v("片元着色器代码：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("/*\n  示例说明：\n  描述了一个简单的片元着色器\n*/\nprecision mediump float;\nin vec4 v_color;  // input vertex color from vertex shader\nout vec4 fragColor;  // output fragment color\n\nvoid main ()\n{\n  fragColor = v_color;\n}\n")])])]),a("h3",{attrs:{id:"片元着色器-内建特殊变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器-内建特殊变量"}},[t._v("#")]),t._v(" 片元着色器 内建特殊变量")]),t._v(" "),a("p",[t._v("gl_FragCoord gl_FrontFacing gl_PointCoord gl_FragDepth")]),t._v(" "),a("h3",{attrs:{id:"片元着色器内建常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器内建常量"}},[t._v("#")]),t._v(" 片元着色器内建常量")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const mediump int gl_MaxFragmentInputVectors = 15;\nconst mediump int gl_MaxTextureImageUnits = 16;\nconst mediump int gl_MaxFragmentUniformVectors = 224;\nconst mediump int gl_MaxDrawBuffers = 4;\n")])])]),a("p",[t._v("多个纹理单元渲染（服务器）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 片元着色器代码\nattribute vec2 v_texCoord;\nuniform sampler2D s_baseMap;\nuniform sampler2D s_SecondMap;\nvoid main()\n{\n  vec4 baseColor;\n  vec4 secondColor;\n  baseColor = texture(s_baseMap ,v_texCoord);\n  secondColor = texture(s_SecondMap ,v_texCoord);\n  gl_FragColor = baseColor * secondColor;\n}\n")])])]),a("p",[t._v("多个纹理单元渲染（客户端）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// 客户端代码: 将各个纹理理对象绑定到纹理理单元0和1,为采样器器设置数 值,将采集器器绑定到对应的纹理理单元\nglActiveTexutre(GL_TEXTURE0);\nglBindTeture(GL_TEXTURE_2D ,baseMapTexId);\nglUniformli(baseMapTexId,0);\nglActiveTexutre(GL_TEXTURE1);\nglBindTeture(GL_TEXTURE_2D ,secondMapTexId);\nglUniformli(secondMapTexId,1);\n")])])]),a("h3",{attrs:{id:"片元着色器内建函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#片元着色器内建函数"}},[t._v("#")]),t._v(" 片元着色器内建函数")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("常⽤用内建函数:\ndot :点乘\ncross :叉乘\ntexture2D :⽤用于对纹理理采样\nnormalize :对⼀一个向量量规格化\nclamp :将⼀一个向量量固定在⼀一个最⼩小值和最⼤大值之间\n")])])]),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/image-20220813211052518.png",alt:"内建函数"}}),t._v("​")]),t._v(" "),a("h2",{attrs:{id:"逐片段操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逐片段操作"}},[t._v("#")]),t._v(" 逐片段操作")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/1132.png",alt:"img"}}),t._v("​")]),t._v(" "),a("p",[t._v("**像素归属测试：**这个测试确定帧缓冲区中位置(Xw,Yw)的像素目前是不是归OpenGL ES所有。这个测试使窗口系统能够控制帧缓冲区中的哪些像素"),a("code",[t._v("属于当前OpenGL ES上下文")]),t._v("​。例如，如果一个显示OpenGL ES帧缓冲区窗口的窗口被另一个窗口所遮蔽，则窗口系统可以确定被遮蔽的像素不属于OpenGL ES上下文，从而完成不显示这些像素。虽然像素回归测试是OpenGL ES的一部分，但是"),a("code",[t._v("它不由开发人员控制")]),t._v("​，而是在OpenGL ES内部进行。")]),t._v(" "),a("p",[t._v("**裁剪测试：**裁剪测试确定(Xw,Yw)是否位于作为OpenGL ES状态的一部分裁剪矩形范围内。如果该片段位于裁剪区域之外，则被抛弃。")]),t._v(" "),a("p",[t._v("**模板和深度测试测试：**这些测试"),a("code",[t._v("在输入片段的模板和深度值上进行")]),t._v("​，以确定片段是否应该被拒绝。")]),t._v(" "),a("p",[t._v("**混合：**混合将"),a("code",[t._v("新生成的片段颜色值")]),t._v("​与保存在"),a("code",[t._v("帧缓冲区(Xw,Yw)位置")]),t._v("​的颜色值"),a("code",[t._v("组合")]),t._v("​起来。")]),t._v(" "),a("p",[t._v("**抖动：**抖动可用于最小化因为使用有限精度在帧缓冲区中保存颜色值而产生的伪像。")]),t._v(" "),a("h2",{attrs:{id:"opengl-es-动画"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opengl-es-动画"}},[t._v("#")]),t._v(" OpenGL ES 动画")]),t._v(" "),a("p",[t._v("动画循环")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/update_display_loop_2x.png",alt:"update_display_loop_2x.png"}}),t._v("​")]),t._v(" "),a("p",[t._v("显示器执行动画的应用程序流程")]),t._v(" "),a("p",[t._v("​"),a("img",{attrs:{src:"http://xingyajie.oss-cn-hangzhou.aliyuncs.com/uPic/application_design_2x.png",alt:"img"}}),t._v("​")])])}),[],!1,null,null,null);a.default=_.exports}}]);